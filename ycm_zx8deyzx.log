2020-07-20 02:24:26,061 - DEBUG - GET b'http://127.0.0.1:43489/ready' (None)
{'content-type': 'application/json', 'x-ycm-hmac': b'0tJ7474lE55ukLOjZgOsUScaubrvg1K611YOyJC8Zr8='}
2020-07-20 02:24:26,214 - ERROR - HTTPConnectionPool(host='127.0.0.1', port=43489): Max retries exceeded with url: /ready (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f537d4096a0>: Failed to establish a new connection: [Errno 111] Connection refused',))
2020-07-20 02:24:26,314 - DEBUG - GET b'http://127.0.0.1:43489/ready' (None)
{'content-type': 'application/json', 'x-ycm-hmac': b'0tJ7474lE55ukLOjZgOsUScaubrvg1K611YOyJC8Zr8='}
2020-07-20 02:24:26,318 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:24:26,318 - DEBUG - GET b'http://127.0.0.1:43489/signature_help_available' ({'subserver': 'nerdtree'})
{'content-type': 'application/json', 'x-ycm-hmac': b'AIg4z183WZT6+R1lQnMAjlFh12AKFz0hnw533noq7gM='}
2020-07-20 02:24:26,321 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'sHKyti9BXp+bSnxBRoFO8/7FtMpmujo+rQOqOhs/LiY='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:24:26,326 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'JKfyVr5nIYIkSSD9ptOrvORwpZIeH2YTTYA41mwp748='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:24:26,418 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'4AP/OWAylW2yErAxwAbfDC0NCUhQZEPAZXgOAO5qpDo='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}}'
2020-07-20 02:24:26,422 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'oQIda0Kvt+mBbrAzjf29H6EGt+cWuek3Ne4NPJZI3hU='}
b'{"filepath": "/home/zyh/.vim/banner.txt", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/.vim/banner.txt": {"contents": "----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n---------------------------------------------------------------------------------------------------WXNOmmdlksoffh-----------------\\n--------------------------------WMWoododdoWM---------------------------------------------------WXMNWOMWxkdlolokfdxk---------------\\n-----------------------------WWX0OxooddxxddkO0NW-----------------------------------------WWXK000OOkxoldlcoolldxkO0XNW-------------\\n--------------------------WNKkxo;clccllooll:;:odxOKNW--------------------------------NK00kdc::::coddoododxxdoolcllldk0N-----------\\n-----------------------WWXkdo:lo:ooloc:clllcllc::::cdxO0KXNNNWWW------------------WXOxlcooolccodlodoolcccloolloddooood0W----------\\n---------------------NKkddclc,oxxKKOdc:cclooll::c:;;::ccclodooddxxxxxxxddkkxkOOkkxdolcllodxolloooddol:,\'\',,;:lodxxxxxdON----------\\n------------------WKkxlcc;;xkkKWWXOdoc:ccllccc::ccc;;:c::clloc:llllclc:;,cccllcclcllllcccloollcclc::;,\'\'\'\'\'\';ododdxxxolkN---------\\n--------------WWX0x,,lc,ldkXW---NOooo;.\';c::c:;:::c:;:c:\';cll;clcolcollocllddooooccccc;;::llc::::;;;;;,,,,ldloxkkkOklcxKW---------\\n-WXOkkxOkkOOkxddl::\',lxOXW----WN0dllc;,,:cc:;;,;clccc::;\';c:,:l:co:,:cccc:ccc::cc:;;;;:;:ccc:;cc::,,::;;,;OWNXNNNWWNXKN-----------\\nXKd\'\'clddxdddoodocdxxO0XNKO0KOxocol::;\'\':::c;;;,::;;;;,..\';..::,:o:,cc:cc:lc:;:c::;:cclccllc:::clc:;:::;;,xW----------------------\\nX0o;coolodxxxxxxxxxxxxxxkl\':do::lxo;;c:;cc;:::c;;;,,\'\'\'\'....,l,.;l:\':olollooooooc::,:occlcc::lolooc:;;:c:,lK----------------------\\nWNOdl;;:cdkkkxxxdxxxxxxxoc::;:lcc::l;\'ccc:,,;:cccclodxkkdooodkocclc\',cccldllolcoocllcl:,::;,,:cclcc:;;::;;;xW---------------------\\n-W0l;;lxk0KKKKKXXNNNXXX0kxxo,;lc,,:,,coolcodkO0KXNWW---WWNXK0OOkkkxolc;;lo:clcccccc::ll::;;:llool:;:c:;;\',\';OW--------------------\\n--NkodO000KXNW-----------WNN0xdocc::llcoOKXW----------------WWNXK00Oxdc::lc,:c::;,:c;,:odolk0x:,,\'.;cclc;;;:lxOO0XW---------------\\n---WNNWWWW--------------------WNX0OKKXNW-------------------------WWNXX0Oxxxddooxdookkxk0KXNWWO:\',,;;\'.;llc:cc;,\',:okKW------------\\n-----------------------------------------------------------------------WNNNWWNNNWWWWWWWW-----WK000Okddxxkkdlc,\';,,;:cokXW---------\\n----------------------------------------------------------------------------------------------------------WNKxlc;,;ll::ckN--------\\n-------------------------------------------------------------------------------------------------------------WNKkd:,clccl0W-------\\n-----------------------------------------------------------------------------------------------------------------WXOkxoooxKNNWW---\\n---------------------------------------------------------------------------------------------------------------------WKkxdxkxxkkx-\\n----------------------------------------------------------------------------------------------------------------------WXKX0Okdolox\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n", "filetypes": ["text"]}}}'
2020-07-20 02:24:26,429 - DEBUG - POST b'http://127.0.0.1:43489/semantic_completion_available'
{'content-type': 'application/json', 'x-ycm-hmac': b'nJ2UJJqGdSvqv5Vglc26N0LhpjI67nPRZrcEpcLVbLQ='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "filetypes": "nerdtree"}'
2020-07-20 02:24:26,432 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:24:26,528 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:24:26,528 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:24:26,581 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'hntrVUXV5BbRD9L+wJM95+VczqQ6pb8TS3LqxeoP3wY='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25b8 \\u0007java/\\n  \\u25b8 \\u0007resources/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:24:27,244 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'LR8rOcgH1BGUxI9fhLWgfG2qKZxLgNtO1AXtPrYrgQ4='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 6, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25be \\u0007java/myflink/\\n      \\u0007ClientOfHTTP.java\\u0007*\\n      \\u0007Constants.java\\u0007*\\n      \\u0007PravegaWriter.java\\u0007*\\n      \\u0007StreamingJob.java\\u0007*\\n      \\u0007Utils.java\\u0007*\\n  \\u25b8 \\u0007resources/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:24:28,351 - DEBUG - GET b'http://127.0.0.1:43489/signature_help_available' ({'subserver': 'java'})
{'content-type': 'application/json', 'x-ycm-hmac': b'AIg4z183WZT6+R1lQnMAjlFh12AKFz0hnw533noq7gM='}
2020-07-20 02:24:28,357 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'NPcvlwmle7Kjr6migylvQUZSaVyDHvngV2RRnGNXkxQ='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:24:28,360 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'rnKWLJlLpWQDRDpZyOqTP5b0zdna+wAlqKgyQCuo1C4='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:24:28,558 - DEBUG - POST b'http://127.0.0.1:43489/semantic_completion_available'
{'content-type': 'application/json', 'x-ycm-hmac': b'ZLXiZgFEogdSV5jymWsRvO0MSDHh5WL5lb8WfCudJ+8='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "filetypes": "java"}'
2020-07-20 02:24:28,564 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:24:28,565 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:24:28,565 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:33,953 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:24:33,953 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:34,055 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: Init..."},{"message":"Initializing Java completer: 0% Starting Java Language Server"}]
2020-07-20 02:24:34,058 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:37,054 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 35% Starting Java Language Server - Refreshing '/jdt.ls-java-project'."}]
2020-07-20 02:24:37,055 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:39,849 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 79% Starting Java Language Server - project myflink"}]
2020-07-20 02:24:39,849 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:40,052 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 80% Starting Java Language Server - project myflink"}]
2020-07-20 02:24:40,053 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:40,154 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 100% Starting Java Language Server - Updating configuration for myflink"}]
2020-07-20 02:24:40,155 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:40,455 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: Ready"}]
2020-07-20 02:24:40,456 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:47,216 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'LUU2xKFFdrkWRaVWMHgWbKL/nt765o0T4HSscgRL2QY='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 9, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        \\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "CurrentIdentifierFinished"}'
2020-07-20 02:24:47,241 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:24:47,242 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:47,542 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:24:47,543 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:47,619 - DEBUG - POST b'http://127.0.0.1:43489/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'OUS0wMBKCx9DON2MyldDK9wCm0u7ZUbJtxQ7lhII6Yc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 10, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        p\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:24:47,639 - DEBUG - RX: <Response [200]>
{"completions":[],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:47,852 - DEBUG - POST b'http://127.0.0.1:43489/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'tZBsV/i1BV7l9XAGlHfsNJzp4bVuwmjzN9AuqLJX5so='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 11, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        po\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:24:47,868 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"},{"insertion_text":"portDataSource","extra_menu_info":"[ID]"},{"insertion_text":"parseBoolean","extra_menu_info":"[ID]"},{"insertion_text":"PravegaConfig","extra_menu_info":"[ID]"},{"insertion_text":"ParameterTool","extra_menu_info":"[ID]"},{"insertion_text":"PravegaSerialization","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigWriter","extra_menu_info":"[ID]"},{"insertion_text":"PravegaEventRouter","extra_menu_info":"[ID]"},{"insertion_text":"PravegaDeserializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigDataSource","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:47,960 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"},{"insertion_text":"portDataSource","extra_menu_info":"[ID]"},{"insertion_text":"parseBoolean","extra_menu_info":"[ID]"},{"insertion_text":"PravegaConfig","extra_menu_info":"[ID]"},{"insertion_text":"ParameterTool","extra_menu_info":"[ID]"},{"insertion_text":"PravegaSerialization","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigWriter","extra_menu_info":"[ID]"},{"insertion_text":"PravegaEventRouter","extra_menu_info":"[ID]"},{"insertion_text":"PravegaDeserializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigDataSource","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:47,981 - DEBUG - POST b'http://127.0.0.1:43489/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'E2fCcrbx1RFJr4QHxU/6aOZsqJkQQi7LGjfQFRUI5kc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 12, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        por\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:24:47,993 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"},{"insertion_text":"portDataSource","extra_menu_info":"[ID]"},{"insertion_text":"PravegaEventRouter","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigWriter","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigDataSource","extra_menu_info":"[ID]"},{"insertion_text":"copyOfRange","extra_menu_info":"[ID]"},{"insertion_text":"import","extra_menu_info":"[ID]"},{"insertion_text":"ipDataSource","extra_menu_info":"[ID]"},{"insertion_text":"scopeDataSource","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:47,994 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"},{"insertion_text":"portDataSource","extra_menu_info":"[ID]"},{"insertion_text":"PravegaEventRouter","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigWriter","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigDataSource","extra_menu_info":"[ID]"},{"insertion_text":"copyOfRange","extra_menu_info":"[ID]"},{"insertion_text":"import","extra_menu_info":"[ID]"},{"insertion_text":"ipDataSource","extra_menu_info":"[ID]"},{"insertion_text":"scopeDataSource","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:48,174 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"},{"insertion_text":"portDataSource","extra_menu_info":"[ID]"},{"insertion_text":"PravegaEventRouter","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigWriter","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigDataSource","extra_menu_info":"[ID]"},{"insertion_text":"copyOfRange","extra_menu_info":"[ID]"},{"insertion_text":"import","extra_menu_info":"[ID]"},{"insertion_text":"ipDataSource","extra_menu_info":"[ID]"},{"insertion_text":"scopeDataSource","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:48,199 - DEBUG - POST b'http://127.0.0.1:43489/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'R9pzuDrPNe+r+/zKjkXwfP71ugHzXcz1HuZtl0xdXBQ='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 13, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        port\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:24:48,210 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"},{"insertion_text":"portDataSource","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigWriter","extra_menu_info":"[ID]"},{"insertion_text":"import","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:48,211 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"},{"insertion_text":"portDataSource","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigWriter","extra_menu_info":"[ID]"},{"insertion_text":"import","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:48,469 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"},{"insertion_text":"portDataSource","extra_menu_info":"[ID]"},{"insertion_text":"pravegaConfigWriter","extra_menu_info":"[ID]"},{"insertion_text":"import","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:48,493 - DEBUG - POST b'http://127.0.0.1:43489/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'RUbP/o+OgcZ9Qo4gkOyhC1easBwj4Wwvv+P9bzRF4vs='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 14, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        portO\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:24:48,509 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:48,509 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:49,437 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"portOutput","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:24:49,461 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'ga9h/5cbEYt1bCdhu+B/smsEPMvh5eiNd8QNK4imIow='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 20, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        portOutput.\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "CurrentIdentifierFinished"}'
2020-07-20 02:24:49,463 - DEBUG - POST b'http://127.0.0.1:43489/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'HPjcnYFEe+sSIo4S3/CM3IuZ3GefiPk5mo7280Blxh4='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 20, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        portOutput.\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:24:49,513 - DEBUG - RX: <Response [200]>
{"completions":[],"completion_start_column":20,"errors":[]}
2020-07-20 02:24:53,468 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'DOZqWCFQnTguJq6bH25aMmumPvtpDhGBFd7XiKA5qZM='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 19, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        portOutput.\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:24:53,473 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'jxxCo20OYMmI8C4E7ObU5hPg1sg1LzOR1duY1tXZ/vI='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 65, "column_num": 19, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        portOutput.\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "InsertLeave"}'
2020-07-20 02:24:53,573 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:24:53,710 - DEBUG - POST b'http://127.0.0.1:43489/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'uBFaEMrsFb1O/3hGkuADutJoJyw/29mv4J2Gm29Hyjo='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 64, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:24:53,784 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:24:53,785 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:24:53,812 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:24:53,885 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:24:53,886 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:25:03,161 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:25:03,162 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:25:03,262 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:25:03,263 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:25:13,334 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:25:13,335 - DEBUG - POST b'http://127.0.0.1:43489/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b't6KLYLdFL2Ebijbl0TWBr53uNlEPPs5Ln44T0cXjh+w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
