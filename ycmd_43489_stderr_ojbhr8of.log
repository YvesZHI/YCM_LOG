2020-07-20 02:24:26,237 - DEBUG - No global extra conf, not calling method YcmCorePreload
2020-07-20 02:24:26,317 - INFO - Received ready request
2020-07-20 02:24:26,321 - INFO - Received signature help available request
2020-07-20 02:24:26,324 - INFO - Received event notification
2020-07-20 02:24:26,324 - DEBUG - Event name: BufferVisit
2020-07-20 02:24:26,324 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:24:26,328 - INFO - Received event notification
2020-07-20 02:24:26,328 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:24:26,328 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1
2020-07-20 02:24:26,328 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:24:26,430 - INFO - Received filetype completion available request
2020-07-20 02:24:26,431 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:24:26,583 - INFO - Received event notification
2020-07-20 02:24:26,583 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:24:26,583 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1
2020-07-20 02:24:26,583 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:24:27,246 - INFO - Received event notification
2020-07-20 02:24:27,247 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:24:27,247 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1
2020-07-20 02:24:27,247 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:24:28,353 - INFO - Received signature help available request
2020-07-20 02:24:28,355 - INFO - Looking for jdt.ls
2020-07-20 02:24:28,356 - DEBUG - Found launchers: ['/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar']
2020-07-20 02:24:28,356 - DEBUG - Found launchers: ['/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar']
2020-07-20 02:24:28,356 - INFO - extension directory does not exist: /home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/extensions
2020-07-20 02:24:28,356 - DEBUG - Found launchers: ['/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar']
2020-07-20 02:24:28,359 - INFO - Received event notification
2020-07-20 02:24:28,359 - DEBUG - Event name: BufferVisit
2020-07-20 02:24:28,363 - INFO - Received event notification
2020-07-20 02:24:28,363 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:24:28,363 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:24:28,365 - INFO - Starting jdt.ls Language Server...
2020-07-20 02:24:28,366 - DEBUG - Found .project style project in /home/zyh/tmpWorkZone/RTSP/myflinkRTSP. Searching for project root:
2020-07-20 02:24:28,366 - DEBUG -   Project root is /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
2020-07-20 02:24:28,366 - INFO - Starting jdt.ls: ['/usr/bin/java', '-Dfile.encoding=UTF-8', '-Declipse.application=org.eclipse.jdt.ls.core.id1', '-Dosgi.bundles.defaultStartLevel=4', '-Declipse.product=org.eclipse.jdt.ls.core.product', '-Dlog.level=ALL', '-jar', '/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar', '-configuration', '/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/config_linux', '-data', '/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmp9q40loym']
2020-07-20 02:24:28,379 - INFO - jdt.ls started with PID 128146
2020-07-20 02:24:28,380 - DEBUG - TX: Sending message: b'Content-Length: 1076\r\n\r\n{"id":1,"jsonrpc":"2.0","method":"initialize","params":{"capabilities":{"textDocument":{"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["plaintext","markdown"]},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"contentFormat":["plaintext","markdown"]},"signatureHelp":{"signatureInformation":{"documentationFormat":["plaintext","markdown"],"parameterInformation":{"labelOffsetSupport":false}}},"synchronization":{"didSave":true}},"workspace":{"applyEdit":true,"didChangeWatchedFiles":{"dynamicRegistration":true},"documentChanges":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}}}},"initializationOptions":{"bundles":[]},"processId":128096,"rootPath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP","rootUri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}}'
2020-07-20 02:24:28,563 - INFO - Received filetype completion available request
2020-07-20 02:24:33,646 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:33 AM Main thread is waiting"}}'
2020-07-20 02:24:33,689 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:33 AM \\u003e\\u003e initialize"}}'
2020-07-20 02:24:33,812 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:33 AM Initializing Java Language Server 0.57.0.202006172108"}}'
2020-07-20 02:24:33,891 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:33 AM Static Commands: []"}}'
2020-07-20 02:24:33,894 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:33 AM Non-Static Commands: [java.edit.organizeImports, java.project.refreshDiagnostics, java.project.import, java.project.removeFromSourcePath, java.project.listSourcePaths, java.project.provideSemanticTokens, java.project.getAll, java.project.isTestFile, java.project.getClasspaths, java.project.getSemanticTokensLegend, java.project.getSettings, java.project.updateSourceAttachment, java.project.resolveSourceAttachment, java.project.addToSourcePath]"}}'
2020-07-20 02:24:33,908 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"Init..."}}'
2020-07-20 02:24:33,919 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"0% Starting Java Language Server"}}'
2020-07-20 02:24:33,938 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:33 AM Creating the Java project jdt.ls-java-project"}}'
2020-07-20 02:24:33,939 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","id":1,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"hoverProvider":true,"completionProvider":{"resolveProvider":true,"triggerCharacters":[".","@","#","*"]},"signatureHelpProvider":{"triggerCharacters":["("]},"definitionProvider":true,"typeDefinitionProvider":true,"implementationProvider":true,"referencesProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"codeLensProvider":{"resolveProvider":true},"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":";","moreTriggerCharacter":["\\n","}"]},"renameProvider":{"prepareProvider":true},"foldingRangeProvider":true,"executeCommandProvider":{"commands":["java.edit.organizeImports","java.project.refreshDiagnostics","java.project.import","java.project.removeFromSourcePath","java.project.listSourcePaths","java.project.provideSemanticTokens","java.project.getAll","java.project.isTestFile","java.project.getClasspaths","java.project.getSemanticTokensLegend","java.project.getSettings","java.project.updateSourceAttachment","java.project.resolveSourceAttachment","java.project.addToSourcePath"]},"workspace":{"workspaceFolders":{"supported":true,"changeNotifications":true}},"callHierarchyProvider":true,"selectionRangeProvider":true}}}'
2020-07-20 02:24:33,939 - INFO - Language server requires sync type of Incremental
2020-07-20 02:24:33,940 - DEBUG - java: Server declares trigger characters: ['.', '@', '#', '*']
2020-07-20 02:24:33,940 - INFO - java: Using trigger characters for semantic triggers: .,@,#,*
2020-07-20 02:24:33,940 - DEBUG - java: Server declares signature trigger characters: ['(']
2020-07-20 02:24:33,940 - INFO - java: Using characters for signature triggers: (,,
2020-07-20 02:24:33,940 - DEBUG - TX: Sending notification: b'Content-Length: 52\r\n\r\n{"jsonrpc":"2.0","method":"initialized","params":{}}'
2020-07-20 02:24:33,941 - DEBUG - TX: Sending notification: b'Content-Length: 98\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"bundles":[]}}}'
2020-07-20 02:24:33,942 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action Open
2020-07-20 02:24:33,943 - DEBUG - TX: Sending notification: b'Content-Length: 9202\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"languageId":"java","text":"package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n","uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":1}}}'
2020-07-20 02:24:33,949 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:33 AM \\u003e\\u003e initialized"}}'
2020-07-20 02:24:33,956 - INFO - Server reported: Jul 20, 2020, 2:24:33 AM Main thread is waiting
2020-07-20 02:24:33,956 - INFO - Server reported: Jul 20, 2020, 2:24:33 AM >> initialize
2020-07-20 02:24:33,956 - INFO - Server reported: Jul 20, 2020, 2:24:33 AM Initializing Java Language Server 0.57.0.202006172108
2020-07-20 02:24:33,956 - INFO - Server reported: Jul 20, 2020, 2:24:33 AM Static Commands: []
2020-07-20 02:24:33,956 - INFO - Server reported: Jul 20, 2020, 2:24:33 AM Non-Static Commands: [java.edit.organizeImports, java.project.refreshDiagnostics, java.project.import, java.project.removeFromSourcePath, java.project.listSourcePaths, java.project.provideSemanticTokens, java.project.getAll, java.project.isTestFile, java.project.getClasspaths, java.project.getSemanticTokensLegend, java.project.getSettings, java.project.updateSourceAttachment, java.project.resolveSourceAttachment, java.project.addToSourcePath]
2020-07-20 02:24:33,956 - INFO - Server reported: Jul 20, 2020, 2:24:33 AM Creating the Java project jdt.ls-java-project
2020-07-20 02:24:33,956 - INFO - Server reported: Jul 20, 2020, 2:24:33 AM >> initialized
2020-07-20 02:24:34,256 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":2,"message":"Jul 20, 2020, 2:24:34 AM Could not load Gradle version information\\nCannot download published Gradle versions.\\norg.gradle.api.UncheckedIOException: Cannot download published Gradle versions.\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:165)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.tryToDownloadAndCacheVersions(PublishedGradleVersions.java:149)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.create(PublishedGradleVersions.java:109)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersionsWrapper$LoadVersionsJob.run(PublishedGradleVersionsWrapper.java:60)\\n\\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\\nCaused by: java.io.IOException: Unable to tunnel through proxy. Proxy returns \\"HTTP/1.1 407 authenticationrequired\\"\\n\\tat java.base/sun.net.www.protocol.http.HttpURLConnection.doTunneling(HttpURLConnection.java:2172)\\n\\tat java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:183)\\n\\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1587)\\n\\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1515)\\n\\tat java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:250)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:162)\\n\\t... 4 more\\n"}}'
2020-07-20 02:24:34,257 - WARNING - Server reported: Jul 20, 2020, 2:24:34 AM Could not load Gradle version information
Cannot download published Gradle versions.
org.gradle.api.UncheckedIOException: Cannot download published Gradle versions.
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:165)
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.tryToDownloadAndCacheVersions(PublishedGradleVersions.java:149)
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.create(PublishedGradleVersions.java:109)
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersionsWrapper$LoadVersionsJob.run(PublishedGradleVersionsWrapper.java:60)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.io.IOException: Unable to tunnel through proxy. Proxy returns "HTTP/1.1 407 authenticationrequired"
	at java.base/sun.net.www.protocol.http.HttpURLConnection.doTunneling(HttpURLConnection.java:2172)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:183)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1587)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1515)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:250)
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:162)
	... 4 more

2020-07-20 02:24:34,336 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:34 AM Finished creating the Java project jdt.ls-java-project"}}'
2020-07-20 02:24:34,336 - INFO - Server reported: Jul 20, 2020, 2:24:34 AM Finished creating the Java project jdt.ls-java-project
2020-07-20 02:24:36,979 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"35% Starting Java Language Server - Refreshing \\u0027/jdt.ls-java-project\\u0027."}}'
2020-07-20 02:24:37,002 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:37 AM Importing Maven project(s)"}}'
2020-07-20 02:24:37,059 - INFO - Server reported: Jul 20, 2020, 2:24:37 AM Importing Maven project(s)
2020-07-20 02:24:39,759 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"79% Starting Java Language Server - project myflink"}}'
2020-07-20 02:24:39,966 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"80% Starting Java Language Server - project myflink"}}'
2020-07-20 02:24:40,112 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"100% Starting Java Language Server - Updating configuration for myflink"}}'
2020-07-20 02:24:40,399 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:40 AM Workspace initialized in 6216ms"}}'
2020-07-20 02:24:40,400 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Started","message":"Ready"}}'
2020-07-20 02:24:40,400 - INFO - jdt.ls initialized successfully
2020-07-20 02:24:40,400 - INFO - Server reported: Jul 20, 2020, 2:24:40 AM Workspace initialized in 6216ms
2020-07-20 02:24:40,411 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"100% Starting Java Language Server - Updating configuration for myflink"}}'
2020-07-20 02:24:40,499 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:40 AM \\u003e\\u003e initialization job finished"}}'
2020-07-20 02:24:40,499 - INFO - Server reported: Jul 20, 2020, 2:24:40 AM >> initialization job finished
2020-07-20 02:24:40,505 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:40 AM \\u003e\\u003e workspace/didChangeConfiguration"}}'
2020-07-20 02:24:40,505 - INFO - Server reported: Jul 20, 2020, 2:24:40 AM >> workspace/didChangeConfiguration
2020-07-20 02:24:40,577 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:40 AM \\u003e\\u003e New configuration: {bundles\\u003d[]}"}}'
2020-07-20 02:24:40,577 - INFO - Server reported: Jul 20, 2020, 2:24:40 AM >> New configuration: {bundles=[]}
2020-07-20 02:24:40,589 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:40 AM \\u003e\\u003e document/didOpen"}}'
2020-07-20 02:24:40,589 - INFO - Server reported: Jul 20, 2020, 2:24:40 AM >> document/didOpen
2020-07-20 02:24:42,652 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:42 AM \\u003e\\u003e build jobs finished"}}'
2020-07-20 02:24:42,653 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"ServiceReady","message":"ServiceReady"}}'
2020-07-20 02:24:42,653 - INFO - Server reported: Jul 20, 2020, 2:24:42 AM >> build jobs finished
2020-07-20 02:24:42,664 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:42 AM \\u003e\\u003e registerFeature \\u0027workspace/didChangeWatchedFiles\\u0027"}}'
2020-07-20 02:24:42,664 - INFO - Server reported: Jul 20, 2020, 2:24:42 AM >> registerFeature 'workspace/didChangeWatchedFiles'
2020-07-20 02:24:42,668 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:42 AM \\u003e\\u003e registerFeature \\u0027workspace/didChangeWatchedFiles\\u0027"}}'
2020-07-20 02:24:42,668 - INFO - Server reported: Jul 20, 2020, 2:24:42 AM >> registerFeature 'workspace/didChangeWatchedFiles'
2020-07-20 02:24:42,675 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","id":"1","method":"client/registerCapability","params":{"registrations":[{"id":"1f18bef1-ab5b-460e-92b9-7f659c9d8248","method":"workspace/didChangeWatchedFiles","registerOptions":{"watchers":[{"globPattern":"**/*.java"},{"globPattern":"**/.project"},{"globPattern":"**/.classpath"},{"globPattern":"**/.settings/*.prefs"},{"globPattern":"**/src/**"},{"globPattern":"**/*.gradle"},{"globPattern":"**/gradle.properties"},{"globPattern":"**/pom.xml"},{"globPattern":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP","kind":4}]}}]}}'
2020-07-20 02:24:42,687 - DEBUG - TX: Sending response: b'Content-Length: 40\r\n\r\n{"id":"1","jsonrpc":"2.0","result":null}'
2020-07-20 02:24:42,687 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:42 AM \\u003e\\u003e watchers registered"}}'
2020-07-20 02:24:42,688 - INFO - Server reported: Jul 20, 2020, 2:24:42 AM >> watchers registered
2020-07-20 02:24:47,154 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:24:47,157 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:24:47,164 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:47 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:24:47,164 - INFO - Server reported: Jul 20, 2020, 2:24:47 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:24:47,216 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:24:47,216 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:24:47,222 - INFO - Received event notification
2020-07-20 02:24:47,222 - DEBUG - Event name: CurrentIdentifierFinished
2020-07-20 02:24:47,223 - INFO - Adding ONE buffer identifier for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:24:47,448 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:24:47,622 - INFO - Received completion request
2020-07-20 02:24:47,623 - DEBUG - Using filetype completion: False
2020-07-20 02:24:47,861 - INFO - Received completion request
2020-07-20 02:24:47,861 - DEBUG - Using filetype completion: False
2020-07-20 02:24:47,984 - INFO - Received completion request
2020-07-20 02:24:47,984 - DEBUG - Using filetype completion: False
2020-07-20 02:24:48,202 - INFO - Received completion request
2020-07-20 02:24:48,203 - DEBUG - Using filetype completion: False
2020-07-20 02:24:48,502 - INFO - Received completion request
2020-07-20 02:24:48,503 - DEBUG - Using filetype completion: False
2020-07-20 02:24:49,464 - INFO - Received event notification
2020-07-20 02:24:49,464 - DEBUG - Event name: CurrentIdentifierFinished
2020-07-20 02:24:49,465 - INFO - Adding ONE buffer identifier for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:24:49,469 - INFO - Received completion request
2020-07-20 02:24:49,469 - DEBUG - Using filetype completion: True
2020-07-20 02:24:49,469 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action Change
2020-07-20 02:24:49,470 - DEBUG - TX: Sending notification: b'Content-Length: 9226\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        portOutput.\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n"}],"textDocument":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":2}}}'
2020-07-20 02:24:49,474 - DEBUG - TX: Sending message: b'Content-Length: 219\r\n\r\n{"id":2,"jsonrpc":"2.0","method":"textDocument/completion","params":{"position":{"character":19,"line":64},"textDocument":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java"}}}'
2020-07-20 02:24:49,484 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:49 AM \\u003e\\u003e document/didChange"}}'
2020-07-20 02:24:49,484 - INFO - Server reported: Jul 20, 2020, 2:24:49 AM >> document/didChange
2020-07-20 02:24:49,488 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:49 AM \\u003e\\u003e document/completion"}}'
2020-07-20 02:24:49,488 - INFO - Server reported: Jul 20, 2020, 2:24:49 AM >> document/completion
2020-07-20 02:24:49,504 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:49 AM Completion request completed"}}'
2020-07-20 02:24:49,504 - INFO - Server reported: Jul 20, 2020, 2:24:49 AM Completion request completed
2020-07-20 02:24:49,506 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","id":2,"result":{"isIncomplete":false,"items":[]}}'
2020-07-20 02:24:53,470 - INFO - Received event notification
2020-07-20 02:24:53,470 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:24:53,470 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:24:53,472 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action None
2020-07-20 02:24:53,484 - INFO - Received event notification
2020-07-20 02:24:53,489 - DEBUG - Event name: InsertLeave
2020-07-20 02:24:53,705 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:24:53,706 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:24:53,708 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:53 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:24:53,710 - INFO - Server reported: Jul 20, 2020, 2:24:53 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:24:53,720 - INFO - Received event notification
2020-07-20 02:24:53,723 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:24:53,723 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:24:53,725 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action Change
2020-07-20 02:24:53,725 - DEBUG - TX: Sending notification: b'Content-Length: 9205\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n"}],"textDocument":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":3}}}'
2020-07-20 02:24:53,739 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:24:53,739 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:24:53,749 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:24:53,763 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:24:53 AM \\u003e\\u003e document/didChange"}}'
2020-07-20 02:24:53,787 - INFO - Server reported: Jul 20, 2020, 2:24:53 AM >> document/didChange
2020-07-20 02:25:03,144 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:25:03,145 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:25:03,148 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:25:03 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:25:03,149 - INFO - Server reported: Jul 20, 2020, 2:25:03 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:25:03,149 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:25:03,149 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:25:03,157 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:25:03,157 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:25:03,167 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:25:03,174 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:25:03 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:25:03,265 - INFO - Server reported: Jul 20, 2020, 2:25:03 AM >> workspace/didChangeWatchedFiles 
