2020-07-20 02:15:55,410 - DEBUG - GET b'http://127.0.0.1:56171/ready' (None)
{'content-type': 'application/json', 'x-ycm-hmac': b'L94NhC3TlcaN1nz9+2DavXyYVMQspGiSYcjXYQbM2RE='}
2020-07-20 02:15:55,564 - ERROR - HTTPConnectionPool(host='127.0.0.1', port=56171): Max retries exceeded with url: /ready (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fd0636a76a0>: Failed to establish a new connection: [Errno 111] Connection refused',))
2020-07-20 02:15:55,664 - DEBUG - GET b'http://127.0.0.1:56171/ready' (None)
{'content-type': 'application/json', 'x-ycm-hmac': b'L94NhC3TlcaN1nz9+2DavXyYVMQspGiSYcjXYQbM2RE='}
2020-07-20 02:15:55,668 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:15:55,668 - DEBUG - GET b'http://127.0.0.1:56171/signature_help_available' ({'subserver': 'nerdtree'})
{'content-type': 'application/json', 'x-ycm-hmac': b'zX3lFmj0Yb8K/SrK++0mq+VHpPXwR6RDI3nnYHYr3QA='}
2020-07-20 02:15:55,671 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'OM6VOpsL/fKHZ9poqTSqbGgmjwpFxtEECV66YDIdTf8='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:15:55,676 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'SgXhwG+wH3cGnwI0UNn2EdpSsGRec/RaDATS04GnLAA='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:15:55,768 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'jO9b/h2YiklRe4VbpJjX6xcNvUnRMSCkEyhGvptdCe0='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}}'
2020-07-20 02:15:55,771 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'Ibx6OZg0wVX9CLYn5by0VX1zYpU/Gt+teALPTVzIUbQ='}
b'{"filepath": "/home/zyh/.vim/banner.txt", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/.vim/banner.txt": {"contents": "----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n---------------------------------------------------------------------------------------------------WXNOmmdlksoffh-----------------\\n--------------------------------WMWoododdoWM---------------------------------------------------WXMNWOMWxkdlolokfdxk---------------\\n-----------------------------WWX0OxooddxxddkO0NW-----------------------------------------WWXK000OOkxoldlcoolldxkO0XNW-------------\\n--------------------------WNKkxo;clccllooll:;:odxOKNW--------------------------------NK00kdc::::coddoododxxdoolcllldk0N-----------\\n-----------------------WWXkdo:lo:ooloc:clllcllc::::cdxO0KXNNNWWW------------------WXOxlcooolccodlodoolcccloolloddooood0W----------\\n---------------------NKkddclc,oxxKKOdc:cclooll::c:;;::ccclodooddxxxxxxxddkkxkOOkkxdolcllodxolloooddol:,\'\',,;:lodxxxxxdON----------\\n------------------WKkxlcc;;xkkKWWXOdoc:ccllccc::ccc;;:c::clloc:llllclc:;,cccllcclcllllcccloollcclc::;,\'\'\'\'\'\';ododdxxxolkN---------\\n--------------WWX0x,,lc,ldkXW---NOooo;.\';c::c:;:::c:;:c:\';cll;clcolcollocllddooooccccc;;::llc::::;;;;;,,,,ldloxkkkOklcxKW---------\\n-WXOkkxOkkOOkxddl::\',lxOXW----WN0dllc;,,:cc:;;,;clccc::;\';c:,:l:co:,:cccc:ccc::cc:;;;;:;:ccc:;cc::,,::;;,;OWNXNNNWWNXKN-----------\\nXKd\'\'clddxdddoodocdxxO0XNKO0KOxocol::;\'\':::c;;;,::;;;;,..\';..::,:o:,cc:cc:lc:;:c::;:cclccllc:::clc:;:::;;,xW----------------------\\nX0o;coolodxxxxxxxxxxxxxxkl\':do::lxo;;c:;cc;:::c;;;,,\'\'\'\'....,l,.;l:\':olollooooooc::,:occlcc::lolooc:;;:c:,lK----------------------\\nWNOdl;;:cdkkkxxxdxxxxxxxoc::;:lcc::l;\'ccc:,,;:cccclodxkkdooodkocclc\',cccldllolcoocllcl:,::;,,:cclcc:;;::;;;xW---------------------\\n-W0l;;lxk0KKKKKXXNNNXXX0kxxo,;lc,,:,,coolcodkO0KXNWW---WWNXK0OOkkkxolc;;lo:clcccccc::ll::;;:llool:;:c:;;\',\';OW--------------------\\n--NkodO000KXNW-----------WNN0xdocc::llcoOKXW----------------WWNXK00Oxdc::lc,:c::;,:c;,:odolk0x:,,\'.;cclc;;;:lxOO0XW---------------\\n---WNNWWWW--------------------WNX0OKKXNW-------------------------WWNXX0Oxxxddooxdookkxk0KXNWWO:\',,;;\'.;llc:cc;,\',:okKW------------\\n-----------------------------------------------------------------------WNNNWWNNNWWWWWWWW-----WK000Okddxxkkdlc,\';,,;:cokXW---------\\n----------------------------------------------------------------------------------------------------------WNKxlc;,;ll::ckN--------\\n-------------------------------------------------------------------------------------------------------------WNKkd:,clccl0W-------\\n-----------------------------------------------------------------------------------------------------------------WXOkxoooxKNNWW---\\n---------------------------------------------------------------------------------------------------------------------WKkxdxkxxkkx-\\n----------------------------------------------------------------------------------------------------------------------WXKX0Okdolox\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n", "filetypes": ["text"]}}}'
2020-07-20 02:15:55,779 - DEBUG - POST b'http://127.0.0.1:56171/semantic_completion_available'
{'content-type': 'application/json', 'x-ycm-hmac': b'VPkS+PGCxgsfkDTue7w7ITSEEnejNOntG6Kyz3eZBq4='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "filetypes": "nerdtree"}'
2020-07-20 02:15:55,782 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:15:55,876 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:15:55,877 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:15:56,318 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'SKcL5hTYq13vj9HjoQPkmmuiNz+hrWNPIr+zypkRCS4='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25b8 \\u0007java/\\n  \\u25b8 \\u0007resources/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:15:56,976 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'eVYBjdg/KmBrFrR8a37GXYgZwHF33JOy4fJ1tb7odu0='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 6, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25be \\u0007java/myflink/\\n      \\u0007ClientOfHTTP.java\\u0007*\\n      \\u0007Constants.java\\u0007*\\n      \\u0007PravegaWriter.java\\u0007*\\n      \\u0007StreamingJob.java\\u0007*\\n      \\u0007Utils.java\\u0007*\\n  \\u25b8 \\u0007resources/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:15:58,267 - DEBUG - GET b'http://127.0.0.1:56171/signature_help_available' ({'subserver': 'java'})
{'content-type': 'application/json', 'x-ycm-hmac': b'zX3lFmj0Yb8K/SrK++0mq+VHpPXwR6RDI3nnYHYr3QA='}
2020-07-20 02:15:58,273 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'2RNaGCP/6T4qzyCqII1wyx8jjpCPnWqM63bYwW5keCw='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:15:58,275 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'B+CCqdVc3Exwf6z5SWB2V3zurbfJsExlZIuC7xgpe3s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:15:58,467 - DEBUG - POST b'http://127.0.0.1:56171/semantic_completion_available'
{'content-type': 'application/json', 'x-ycm-hmac': b'ZGDO3sFqgz6ZP7fu0qGe6yB5YtUMT65jeZ7Y/QgF+jk='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "filetypes": "java"}'
2020-07-20 02:15:58,473 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:15:58,474 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:15:58,474 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:04,059 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:16:04,060 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:04,161 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: Init..."},{"message":"Initializing Java completer: 0% Starting Java Language Server"}]
2020-07-20 02:16:04,163 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:06,161 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 35% Starting Java Language Server - Refreshing '/jdt.ls-java-project'."}]
2020-07-20 02:16:06,162 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:09,062 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 79% Starting Java Language Server - project myflink"}]
2020-07-20 02:16:09,063 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:09,264 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 80% Starting Java Language Server - project myflink"}]
2020-07-20 02:16:09,264 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:09,466 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 100% Starting Java Language Server - Updating configuration for myflink"}]
2020-07-20 02:16:09,467 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:09,569 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: Ready"}]
2020-07-20 02:16:09,570 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:14,598 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'/T61ySpeNNonOYCx3rv7CxFIC5ihBo6c6jtmIwa2epY='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 72, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "BufferUnload"}'
2020-07-20 02:16:14,612 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'CWowF2cK/9ebqKAqxTGJu1WqKYBNdsTGwKB6Od0UzHM='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 10, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25be \\u0007java/myflink/\\n      \\u0007ClientOfHTTP.java\\u0007*\\n      \\u0007Constants.java\\u0007*\\n      \\u0007PravegaWriter.java\\u0007*\\n      \\u0007StreamingJob.java\\u0007*\\n      \\u0007Utils.java\\u0007*\\n  \\u25b8 \\u0007resources/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:16:14,615 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'xd4OXTaXVjAyLXs7osLCBycMgrkI2dY4Yth6nyA12qw='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 10, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25be \\u0007java/myflink/\\n      \\u0007ClientOfHTTP.java\\u0007*\\n      \\u0007Constants.java\\u0007*\\n      \\u0007PravegaWriter.java\\u0007*\\n      \\u0007StreamingJob.java\\u0007*\\n      \\u0007Utils.java\\u0007*\\n  \\u25b8 \\u0007resources/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:16:16,207 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'M4Ch+oOhs1mSxn9dkX4bTMMx5g2wQhViKx15TOid/ks='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:16:16,210 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'Tme0rIx/IpTMdPMfOShSgc/AmAlGY5ryaYK3EgY0GN0='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:16:16,348 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:16:16,349 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]
2020-07-20 02:16:16,350 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:16,455 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.PravegaWriter.java.swx"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.PravegaWriter.java.swp"}]
2020-07-20 02:16:16,456 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:18,342 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'BLv+fROZsTbo0cj05pVLBPmsd5UtLXFbmGCsbi19HQQ='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 9, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        \\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "CurrentIdentifierFinished"}'
2020-07-20 02:16:18,355 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:16:18,356 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:18,457 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:16:18,458 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:18,648 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'rr1F92gdGLLyZS5o590m2axprExGHuYmBdQ0AYnW6ac='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 10, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        S\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:18,677 - DEBUG - RX: <Response [200]>
{"completions":[],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:18,802 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'QSkTdNsr6jfpSYfajJSdi5IxxxyNxMinCOdrGCaWFRo='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 11, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        Sy\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:18,824 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"},{"insertion_text":"ScalingPolicy","extra_menu_info":"[ID]"},{"insertion_text":"timeStampByte","extra_menu_info":"[ID]"},{"insertion_text":"EventStreamClientFactory","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:18,923 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"},{"insertion_text":"ScalingPolicy","extra_menu_info":"[ID]"},{"insertion_text":"timeStampByte","extra_menu_info":"[ID]"},{"insertion_text":"EventStreamClientFactory","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:18,941 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'QAgVKAfM+YugfZUj/GQrF2D4F19uwJ/Izcdmu7dN5D8='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 12, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        Sys\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:18,957 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:18,958 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,067 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,083 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'aG5ib0qtO1XDjfgxIU75/azn1UT6KDdQgWpSPOBYXBY='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 13, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        Syst\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:19,094 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,097 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,134 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,151 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'l8MlNQ8jQJFadoHqX4ZoIFTklOa7KvWbt22pA8IPqiI='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 14, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        Syste\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:19,163 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,164 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,207 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,222 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'0HsAVSe6S+HDnXQsnRLSRM5QHkocCgJqzTeQrS8XNiI='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 15, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        System\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:19,237 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,238 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,427 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"System","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:19,442 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'gWny769IIsdS8OcWbsSXJUF9HM4fJWKf9WGxkd2V1o0='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 16, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        System.\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "CurrentIdentifierFinished"}'
2020-07-20 02:16:19,449 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'MJ4si5e48CibnrBBAbEChqcEzU5+Vsc000Qd0v64ZJs='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 16, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        System.\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:19,507 - DEBUG - RX: <Response [200]>
{"completions":[],"completion_start_column":16,"errors":[]}
2020-07-20 02:16:23,361 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'1IbrR5KoOIoJyjPe4J58waGUhyFVH7aol0bjjfgRlqY='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 15, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        System.\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:16:23,367 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'RgYIvxDzlAjQWAwQBCrNe1wsXYprwdt/t3yFE8KkzRk='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 15, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        System.\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "InsertLeave"}'
2020-07-20 02:16:23,467 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:16:23,800 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'G4kaNbj+CJcuKDzWXptrwNTmVdGCBZZ75V8QP73Bhmc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 24, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:16:23,876 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:16:23,876 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:23,904 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:16:23,980 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:16:23,981 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:24,545 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'BLv+fROZsTbo0cj05pVLBPmsd5UtLXFbmGCsbi19HQQ='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 9, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        \\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "CurrentIdentifierFinished"}'
2020-07-20 02:16:24,550 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:16:24,551 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:24,654 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'gOTfrtI3SnVlYhzLL9PlEZJA5A8pQHIX5iFjq3GGXQI='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 10, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        t\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:24,657 - DEBUG - RX: <Response [200]>
{"completions":[],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:24,659 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:16:24,660 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:24,736 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'trEeQZaStCK9gbVIR7My4s2Tn06+udaJNvsiOyxKnQs='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 11, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        th\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:24,740 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"this","extra_menu_info":"[ID]"},{"insertion_text":"throws","extra_menu_info":"[ID]"},{"insertion_text":"withHostnameValidation","extra_menu_info":"[ID]"},{"insertion_text":"ClientOfHTTP","extra_menu_info":"[ID]"},{"insertion_text":"length","extra_menu_info":"[ID]"},{"insertion_text":"withScope","extra_menu_info":"[ID]"},{"insertion_text":"imgPath","extra_menu_info":"[ID]"},{"insertion_text":"withEventRouter","extra_menu_info":"[ID]"},{"insertion_text":"withDefaultScope","extra_menu_info":"[ID]"},{"insertion_text":"withControllerURI","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:24,819 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"this","extra_menu_info":"[ID]"},{"insertion_text":"throws","extra_menu_info":"[ID]"},{"insertion_text":"withHostnameValidation","extra_menu_info":"[ID]"},{"insertion_text":"ClientOfHTTP","extra_menu_info":"[ID]"},{"insertion_text":"length","extra_menu_info":"[ID]"},{"insertion_text":"withScope","extra_menu_info":"[ID]"},{"insertion_text":"imgPath","extra_menu_info":"[ID]"},{"insertion_text":"withEventRouter","extra_menu_info":"[ID]"},{"insertion_text":"withDefaultScope","extra_menu_info":"[ID]"},{"insertion_text":"withControllerURI","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:24,829 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'L11xwtTOKRV1dPGU7E32ndRka6OvyRom5Pg534ijwV8='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 12, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        thi\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:24,833 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"this","extra_menu_info":"[ID]"},{"insertion_text":"withHostnameValidation","extra_menu_info":"[ID]"},{"insertion_text":"withSerializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"withDeserializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"withPravegaConfig","extra_menu_info":"[ID]"},{"insertion_text":"withControllerURI","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:24,835 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"this","extra_menu_info":"[ID]"},{"insertion_text":"withHostnameValidation","extra_menu_info":"[ID]"},{"insertion_text":"withSerializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"withDeserializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"withPravegaConfig","extra_menu_info":"[ID]"},{"insertion_text":"withControllerURI","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:24,870 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"this","extra_menu_info":"[ID]"},{"insertion_text":"withHostnameValidation","extra_menu_info":"[ID]"},{"insertion_text":"withSerializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"withDeserializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"withPravegaConfig","extra_menu_info":"[ID]"},{"insertion_text":"withControllerURI","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:24,880 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'p1OqQAUaJ6qc3gINzSm6zW/zwix0ovcNYVjb5ZeVHUg='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 13, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        this\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:24,883 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"this","extra_menu_info":"[ID]"},{"insertion_text":"withSerializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"withDeserializationSchema","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:24,886 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"this","extra_menu_info":"[ID]"},{"insertion_text":"withSerializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"withDeserializationSchema","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:25,019 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"this","extra_menu_info":"[ID]"},{"insertion_text":"withSerializationSchema","extra_menu_info":"[ID]"},{"insertion_text":"withDeserializationSchema","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:16:25,033 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'o0bCwzXst7/QlI3H1yKg34Do65SE9uv8r+XMQYKnN80='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 14, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        this.\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "CurrentIdentifierFinished"}'
2020-07-20 02:16:25,040 - DEBUG - POST b'http://127.0.0.1:56171/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'UZ5cLp1sOB3PvS04+bRLC1djOmj7DcsP6y5y0fBQBSU='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 14, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        this.\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:16:25,062 - DEBUG - RX: <Response [200]>
{"completions":[],"completion_start_column":14,"errors":[]}
2020-07-20 02:16:28,696 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'r/cb3bhI114E0fcNICGz+nozlCSm/6GSl9CNBLq1/Bo='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 13, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        this.\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:16:28,703 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'IHR8hdYm6CQwwaPVzsgA09mKq8BX4SyloDAlRVZRysY='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 25, "column_num": 13, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        this.\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "InsertLeave"}'
2020-07-20 02:16:28,803 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:16:29,019 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'G4kaNbj+CJcuKDzWXptrwNTmVdGCBZZ75V8QP73Bhmc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 24, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:16:29,084 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:16:29,084 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:29,121 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:16:29,188 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:16:29,189 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:32,640 - DEBUG - POST b'http://127.0.0.1:56171/debug_info'
{'content-type': 'application/json', 'x-ycm-hmac': b'cNaVkCDDFgYYCTMmVzFHQzSzMCFlcgTDM+qenV3rzUc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 24, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:32,644 - DEBUG - RX: <Response [200]>
{"python":{"executable":"/usr/bin/python3","version":"3.6.9"},"clang":{"has_support":false,"version":null},"extra_conf":{"path":null,"is_loaded":false},"completer":{"name":"Java","servers":[{"name":"jdt.ls","is_running":true,"executable":["/usr/bin/java","-Dfile.encoding=UTF-8","-Declipse.application=org.eclipse.jdt.ls.core.id1","-Dosgi.bundles.defaultStartLevel=4","-Declipse.product=org.eclipse.jdt.ls.core.product","-Dlog.level=ALL","-jar","/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar","-configuration","/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/config_linux","-data","/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmp4rxt5bxd"],"address":null,"port":null,"pid":127797,"logfiles":["/tmp/jdt_ls_stderr9ctyzrnw.log","/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmp4rxt5bxd/.metadata/.log"],"extras":[{"key":"Server State","value":"Initialized"},{"key":"Project Directory","value":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"},{"key":"Settings","value":"{\n  \"bundles\": []\n}"},{"key":"Startup Status","value":"Ready"},{"key":"Java Path","value":"/usr/bin/java"},{"key":"Launcher Config.","value":"/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/config_linux"},{"key":"Workspace Path","value":"/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmp4rxt5bxd"},{"key":"Extension Path","value":["/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/extensions"]}]}],"items":[]}}
2020-07-20 02:16:38,670 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:16:38,671 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:38,772 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:16:38,773 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:39,523 - DEBUG - POST b'http://127.0.0.1:56171/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'G4kaNbj+CJcuKDzWXptrwNTmVdGCBZZ75V8QP73Bhmc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java", "line_num": 24, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/PravegaWriter.java": {"contents": "package myflink;\\n\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\n\\nimport io.pravega.client.ClientConfig;\\nimport io.pravega.client.stream.*;\\nimport io.pravega.client.EventStreamClientFactory;\\nimport io.pravega.client.stream.EventStreamWriter;\\nimport io.pravega.client.admin.StreamManager;\\nimport io.pravega.client.stream.impl.ByteBufferSerializer;\\n\\nimport io.pravega.client.stream.impl.JavaSerializer;\\n\\n\\npublic class PravegaWriter {\\n\\n    private EventStreamWriter<String> writer;\\n\\n    public PravegaWriter(String scope, String streamName, String uri) {\\n        URI controllerURI = URI.create(uri);\\n        StreamManager streamManager = StreamManager.create(controllerURI);\\n        System.out.println(\\"Create Scope ...\\");\\n        final boolean scopeIsNew = streamManager.createScope(scope);\\n        StreamConfiguration streamConfig = StreamConfiguration.builder()\\n                .scalingPolicy(ScalingPolicy.fixed(1))\\n                .build();\\n        streamManager.createStream(scope, streamName, streamConfig);\\n        System.out.println(\\"Create Stream success\\");\\n        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scope, ClientConfig.builder().controllerURI(controllerURI).build());\\n        this.writer = clientFactory.createEventWriter(streamName, new JavaSerializer<String>(), EventWriterConfig.builder().build());\\n    }\\n\\n    public void writeMsg(String routingKey, String message) throws Exception {\\n        System.out.println(\\"Start Write ...\\");\\n        this.writer.writeEvent(routingKey, message);\\n        System.out.println(\\"Write done\\");\\n    }\\n}\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:16:39,533 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:16:48,848 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:16:48,849 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:16:58,922 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:16:58,923 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:17:08,993 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:17:08,994 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:17:19,066 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:17:19,067 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:17:29,139 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:17:29,139 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:17:39,211 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:17:39,211 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:17:49,283 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:17:49,283 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:17:59,355 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:17:59,356 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:18:09,428 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:18:09,429 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:18:19,503 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:18:19,504 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:18:29,578 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:18:29,578 - DEBUG - POST b'http://127.0.0.1:56171/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'gY98Isj7paNvskFjwyIbZL5ZzgzH47clHdViBBVngTc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
