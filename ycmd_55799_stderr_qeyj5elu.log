2020-07-20 02:43:49,018 - DEBUG - No global extra conf, not calling method YcmCorePreload
2020-07-20 02:43:49,097 - INFO - Received ready request
2020-07-20 02:43:49,102 - INFO - Received signature help available request
2020-07-20 02:43:49,104 - INFO - Received event notification
2020-07-20 02:43:49,105 - DEBUG - Event name: BufferVisit
2020-07-20 02:43:49,105 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:43:49,108 - INFO - Received event notification
2020-07-20 02:43:49,108 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:43:49,109 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1
2020-07-20 02:43:49,109 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:43:49,212 - INFO - Received filetype completion available request
2020-07-20 02:43:49,212 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:43:49,466 - INFO - Received event notification
2020-07-20 02:43:49,467 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:43:49,467 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1
2020-07-20 02:43:49,467 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:43:50,160 - INFO - Received event notification
2020-07-20 02:43:50,160 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:43:50,160 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1
2020-07-20 02:43:50,160 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:43:51,173 - INFO - Received signature help available request
2020-07-20 02:43:51,175 - INFO - Looking for jdt.ls
2020-07-20 02:43:51,175 - DEBUG - Found launchers: ['/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar']
2020-07-20 02:43:51,176 - DEBUG - Found launchers: ['/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar']
2020-07-20 02:43:51,176 - INFO - extension directory does not exist: /home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/extensions
2020-07-20 02:43:51,176 - DEBUG - Found launchers: ['/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar']
2020-07-20 02:43:51,179 - INFO - Received event notification
2020-07-20 02:43:51,180 - DEBUG - Event name: BufferVisit
2020-07-20 02:43:51,183 - INFO - Received event notification
2020-07-20 02:43:51,183 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:43:51,183 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:43:51,186 - INFO - Starting jdt.ls Language Server...
2020-07-20 02:43:51,186 - DEBUG - Found .project style project in /home/zyh/tmpWorkZone/RTSP/myflinkRTSP. Searching for project root:
2020-07-20 02:43:51,186 - DEBUG -   Project root is /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
2020-07-20 02:43:51,187 - INFO - Starting jdt.ls: ['/usr/bin/java', '-Dfile.encoding=UTF-8', '-Declipse.application=org.eclipse.jdt.ls.core.id1', '-Dosgi.bundles.defaultStartLevel=4', '-Declipse.product=org.eclipse.jdt.ls.core.product', '-Dlog.level=ALL', '-jar', '/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar', '-configuration', '/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/config_linux', '-data', '/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmpkwwa37fn']
2020-07-20 02:43:51,203 - INFO - jdt.ls started with PID 128969
2020-07-20 02:43:51,204 - DEBUG - TX: Sending message: b'Content-Length: 1076\r\n\r\n{"id":1,"jsonrpc":"2.0","method":"initialize","params":{"capabilities":{"textDocument":{"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["plaintext","markdown"]},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"contentFormat":["plaintext","markdown"]},"signatureHelp":{"signatureInformation":{"documentationFormat":["plaintext","markdown"],"parameterInformation":{"labelOffsetSupport":false}}},"synchronization":{"didSave":true}},"workspace":{"applyEdit":true,"didChangeWatchedFiles":{"dynamicRegistration":true},"documentChanges":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}}}},"initializationOptions":{"bundles":[]},"processId":128919,"rootPath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP","rootUri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}}'
2020-07-20 02:43:51,378 - INFO - Received filetype completion available request
2020-07-20 02:43:56,727 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:43:56 AM Main thread is waiting"}}'
2020-07-20 02:43:56,774 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:43:56 AM \\u003e\\u003e initialize"}}'
2020-07-20 02:43:56,895 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:43:56 AM Initializing Java Language Server 0.57.0.202006172108"}}'
2020-07-20 02:43:56,983 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:43:56 AM Static Commands: []"}}'
2020-07-20 02:43:56,985 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:43:56 AM Non-Static Commands: [java.edit.organizeImports, java.project.refreshDiagnostics, java.project.import, java.project.removeFromSourcePath, java.project.listSourcePaths, java.project.provideSemanticTokens, java.project.getAll, java.project.isTestFile, java.project.getClasspaths, java.project.getSemanticTokensLegend, java.project.getSettings, java.project.updateSourceAttachment, java.project.resolveSourceAttachment, java.project.addToSourcePath]"}}'
2020-07-20 02:43:56,996 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"Init..."}}'
2020-07-20 02:43:57,003 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"0% Starting Java Language Server"}}'
2020-07-20 02:43:57,029 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","id":1,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"hoverProvider":true,"completionProvider":{"resolveProvider":true,"triggerCharacters":[".","@","#","*"]},"signatureHelpProvider":{"triggerCharacters":["("]},"definitionProvider":true,"typeDefinitionProvider":true,"implementationProvider":true,"referencesProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"codeLensProvider":{"resolveProvider":true},"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":";","moreTriggerCharacter":["\\n","}"]},"renameProvider":{"prepareProvider":true},"foldingRangeProvider":true,"executeCommandProvider":{"commands":["java.edit.organizeImports","java.project.refreshDiagnostics","java.project.import","java.project.removeFromSourcePath","java.project.listSourcePaths","java.project.provideSemanticTokens","java.project.getAll","java.project.isTestFile","java.project.getClasspaths","java.project.getSemanticTokensLegend","java.project.getSettings","java.project.updateSourceAttachment","java.project.resolveSourceAttachment","java.project.addToSourcePath"]},"workspace":{"workspaceFolders":{"supported":true,"changeNotifications":true}},"callHierarchyProvider":true,"selectionRangeProvider":true}}}'
2020-07-20 02:43:57,029 - INFO - Language server requires sync type of Incremental
2020-07-20 02:43:57,029 - DEBUG - java: Server declares trigger characters: ['.', '@', '#', '*']
2020-07-20 02:43:57,029 - INFO - java: Using trigger characters for semantic triggers: .,@,#,*
2020-07-20 02:43:57,031 - DEBUG - java: Server declares signature trigger characters: ['(']
2020-07-20 02:43:57,034 - INFO - java: Using characters for signature triggers: (,,
2020-07-20 02:43:57,034 - DEBUG - TX: Sending notification: b'Content-Length: 52\r\n\r\n{"jsonrpc":"2.0","method":"initialized","params":{}}'
2020-07-20 02:43:57,034 - DEBUG - TX: Sending notification: b'Content-Length: 98\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"bundles":[]}}}'
2020-07-20 02:43:57,036 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action Open
2020-07-20 02:43:57,037 - DEBUG - TX: Sending notification: b'Content-Length: 9202\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"languageId":"java","text":"package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n","uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":1}}}'
2020-07-20 02:43:57,037 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:43:57 AM Creating the Java project jdt.ls-java-project"}}'
2020-07-20 02:43:57,037 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:43:57 AM \\u003e\\u003e initialized"}}'
2020-07-20 02:43:57,070 - INFO - Server reported: Jul 20, 2020, 2:43:56 AM Main thread is waiting
2020-07-20 02:43:57,070 - INFO - Server reported: Jul 20, 2020, 2:43:56 AM >> initialize
2020-07-20 02:43:57,070 - INFO - Server reported: Jul 20, 2020, 2:43:56 AM Initializing Java Language Server 0.57.0.202006172108
2020-07-20 02:43:57,070 - INFO - Server reported: Jul 20, 2020, 2:43:56 AM Static Commands: []
2020-07-20 02:43:57,070 - INFO - Server reported: Jul 20, 2020, 2:43:56 AM Non-Static Commands: [java.edit.organizeImports, java.project.refreshDiagnostics, java.project.import, java.project.removeFromSourcePath, java.project.listSourcePaths, java.project.provideSemanticTokens, java.project.getAll, java.project.isTestFile, java.project.getClasspaths, java.project.getSemanticTokensLegend, java.project.getSettings, java.project.updateSourceAttachment, java.project.resolveSourceAttachment, java.project.addToSourcePath]
2020-07-20 02:43:57,070 - INFO - Server reported: Jul 20, 2020, 2:43:57 AM Creating the Java project jdt.ls-java-project
2020-07-20 02:43:57,070 - INFO - Server reported: Jul 20, 2020, 2:43:57 AM >> initialized
2020-07-20 02:43:57,356 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":2,"message":"Jul 20, 2020, 2:43:57 AM Could not load Gradle version information\\nCannot download published Gradle versions.\\norg.gradle.api.UncheckedIOException: Cannot download published Gradle versions.\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:165)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.tryToDownloadAndCacheVersions(PublishedGradleVersions.java:149)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.create(PublishedGradleVersions.java:109)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersionsWrapper$LoadVersionsJob.run(PublishedGradleVersionsWrapper.java:60)\\n\\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\\nCaused by: java.io.IOException: Unable to tunnel through proxy. Proxy returns \\"HTTP/1.1 407 authenticationrequired\\"\\n\\tat java.base/sun.net.www.protocol.http.HttpURLConnection.doTunneling(HttpURLConnection.java:2172)\\n\\tat java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:183)\\n\\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1587)\\n\\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1515)\\n\\tat java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:250)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:162)\\n\\t... 4 more\\n"}}'
2020-07-20 02:43:57,356 - WARNING - Server reported: Jul 20, 2020, 2:43:57 AM Could not load Gradle version information
Cannot download published Gradle versions.
org.gradle.api.UncheckedIOException: Cannot download published Gradle versions.
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:165)
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.tryToDownloadAndCacheVersions(PublishedGradleVersions.java:149)
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.create(PublishedGradleVersions.java:109)
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersionsWrapper$LoadVersionsJob.run(PublishedGradleVersionsWrapper.java:60)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.io.IOException: Unable to tunnel through proxy. Proxy returns "HTTP/1.1 407 authenticationrequired"
	at java.base/sun.net.www.protocol.http.HttpURLConnection.doTunneling(HttpURLConnection.java:2172)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:183)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1587)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1515)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:250)
	at org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:162)
	... 4 more

2020-07-20 02:43:57,404 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:43:57 AM Finished creating the Java project jdt.ls-java-project"}}'
2020-07-20 02:43:57,404 - INFO - Server reported: Jul 20, 2020, 2:43:57 AM Finished creating the Java project jdt.ls-java-project
2020-07-20 02:43:59,411 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"35% Starting Java Language Server - Refreshing \\u0027/jdt.ls-java-project\\u0027."}}'
2020-07-20 02:43:59,446 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:43:59 AM Importing Maven project(s)"}}'
2020-07-20 02:43:59,472 - INFO - Server reported: Jul 20, 2020, 2:43:59 AM Importing Maven project(s)
2020-07-20 02:44:02,313 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"79% Starting Java Language Server - project myflink"}}'
2020-07-20 02:44:02,495 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"80% Starting Java Language Server - project myflink"}}'
2020-07-20 02:44:02,777 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"88% Starting Java Language Server - Updating configuration for myflink"}}'
2020-07-20 02:44:02,778 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"100% Starting Java Language Server - Updating configuration for myflink"}}'
2020-07-20 02:44:02,784 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:02 AM Workspace initialized in 5791ms"}}'
2020-07-20 02:44:02,784 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Started","message":"Ready"}}'
2020-07-20 02:44:02,784 - INFO - jdt.ls initialized successfully
2020-07-20 02:44:02,791 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"Starting","message":"100% Starting Java Language Server - Updating configuration for myflink"}}'
2020-07-20 02:44:02,819 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:02 AM \\u003e\\u003e initialization job finished"}}'
2020-07-20 02:44:02,820 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:02 AM \\u003e\\u003e workspace/didChangeConfiguration"}}'
2020-07-20 02:44:02,869 - INFO - Server reported: Jul 20, 2020, 2:44:02 AM Workspace initialized in 5791ms
2020-07-20 02:44:02,870 - INFO - Server reported: Jul 20, 2020, 2:44:02 AM >> initialization job finished
2020-07-20 02:44:02,870 - INFO - Server reported: Jul 20, 2020, 2:44:02 AM >> workspace/didChangeConfiguration
2020-07-20 02:44:02,890 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:02 AM \\u003e\\u003e New configuration: {bundles\\u003d[]}"}}'
2020-07-20 02:44:02,899 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:02 AM \\u003e\\u003e document/didOpen"}}'
2020-07-20 02:44:02,976 - INFO - Server reported: Jul 20, 2020, 2:44:02 AM >> New configuration: {bundles=[]}
2020-07-20 02:44:02,976 - INFO - Server reported: Jul 20, 2020, 2:44:02 AM >> document/didOpen
2020-07-20 02:44:04,787 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:04 AM \\u003e\\u003e build jobs finished"}}'
2020-07-20 02:44:04,787 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"language/status","params":{"type":"ServiceReady","message":"ServiceReady"}}'
2020-07-20 02:44:04,787 - INFO - Server reported: Jul 20, 2020, 2:44:04 AM >> build jobs finished
2020-07-20 02:44:04,798 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:04 AM \\u003e\\u003e registerFeature \\u0027workspace/didChangeWatchedFiles\\u0027"}}'
2020-07-20 02:44:04,798 - INFO - Server reported: Jul 20, 2020, 2:44:04 AM >> registerFeature 'workspace/didChangeWatchedFiles'
2020-07-20 02:44:04,814 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:04 AM \\u003e\\u003e registerFeature \\u0027workspace/didChangeWatchedFiles\\u0027"}}'
2020-07-20 02:44:04,814 - INFO - Server reported: Jul 20, 2020, 2:44:04 AM >> registerFeature 'workspace/didChangeWatchedFiles'
2020-07-20 02:44:04,820 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","id":"1","method":"client/registerCapability","params":{"registrations":[{"id":"20593699-8b94-440b-a628-e41a8bf1e79a","method":"workspace/didChangeWatchedFiles","registerOptions":{"watchers":[{"globPattern":"**/*.java"},{"globPattern":"**/.project"},{"globPattern":"**/.classpath"},{"globPattern":"**/.settings/*.prefs"},{"globPattern":"**/src/**"},{"globPattern":"**/*.gradle"},{"globPattern":"**/gradle.properties"},{"globPattern":"**/pom.xml"},{"globPattern":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP","kind":4}]}}]}}'
2020-07-20 02:44:04,834 - DEBUG - TX: Sending response: b'Content-Length: 40\r\n\r\n{"id":"1","jsonrpc":"2.0","result":null}'
2020-07-20 02:44:04,834 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:04 AM \\u003e\\u003e watchers registered"}}'
2020-07-20 02:44:04,834 - INFO - Server reported: Jul 20, 2020, 2:44:04 AM >> watchers registered
2020-07-20 02:44:13,659 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:13,660 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:13,669 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:13 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:13,669 - INFO - Server reported: Jul 20, 2020, 2:44:13 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:13,714 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:44:13,715 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:44:13,732 - INFO - Received event notification
2020-07-20 02:44:13,732 - DEBUG - Event name: CurrentIdentifierFinished
2020-07-20 02:44:13,733 - INFO - Adding ONE buffer identifier for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:44:13,843 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:44:14,395 - INFO - Received completion request
2020-07-20 02:44:14,396 - DEBUG - Using filetype completion: False
2020-07-20 02:44:15,185 - INFO - Received completion request
2020-07-20 02:44:15,186 - DEBUG - Using filetype completion: False
2020-07-20 02:44:15,397 - INFO - Received completion request
2020-07-20 02:44:15,398 - DEBUG - Using filetype completion: False
2020-07-20 02:44:16,327 - INFO - Received event notification
2020-07-20 02:44:16,327 - DEBUG - Event name: CurrentIdentifierFinished
2020-07-20 02:44:16,328 - INFO - Adding ONE buffer identifier for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:44:16,332 - INFO - Received completion request
2020-07-20 02:44:16,332 - DEBUG - Using filetype completion: True
2020-07-20 02:44:16,332 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action Change
2020-07-20 02:44:16,332 - DEBUG - TX: Sending notification: b'Content-Length: 9221\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Utils.\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n"}],"textDocument":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":2}}}'
2020-07-20 02:44:16,342 - DEBUG - TX: Sending message: b'Content-Length: 219\r\n\r\n{"id":2,"jsonrpc":"2.0","method":"textDocument/completion","params":{"position":{"character":14,"line":94},"textDocument":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java"}}}'
2020-07-20 02:44:16,346 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:16 AM \\u003e\\u003e document/didChange"}}'
2020-07-20 02:44:16,346 - INFO - Server reported: Jul 20, 2020, 2:44:16 AM >> document/didChange
2020-07-20 02:44:16,357 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:16 AM \\u003e\\u003e document/completion"}}'
2020-07-20 02:44:16,357 - INFO - Server reported: Jul 20, 2020, 2:44:16 AM >> document/completion
2020-07-20 02:44:16,367 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:16 AM Completion request completed"}}'
2020-07-20 02:44:16,367 - INFO - Server reported: Jul 20, 2020, 2:44:16 AM Completion request completed
2020-07-20 02:44:16,371 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","id":2,"result":{"isIncomplete":false,"items":[]}}'
2020-07-20 02:44:20,868 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913', wd=8, mask=IN_CREATE, cookie=0, name=4913>
2020-07-20 02:44:20,868 - DEBUG - TX: Sending notification: b'Content-Length: 175\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":1,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913"}]}}'
2020-07-20 02:44:20,868 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:20,870 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:20,870 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:20,871 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913', wd=8, mask=IN_ATTRIB, cookie=0, name=4913>
2020-07-20 02:44:20,871 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913', wd=8, mask=IN_DELETE, cookie=0, name=4913>
2020-07-20 02:44:20,872 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java', wd=8, mask=IN_MOVED_FROM, cookie=79883, name=StreamingJob.java>
2020-07-20 02:44:20,872 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~', wd=8, mask=IN_MOVED_TO, cookie=79883, name=StreamingJob.java~>
2020-07-20 02:44:20,872 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:20,873 - DEBUG - TX: Sending notification: b'Content-Length: 175\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913"}]}}'
2020-07-20 02:44:20,873 - DEBUG - TX: Sending notification: b'Content-Length: 175\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":3,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913"}]}}'
2020-07-20 02:44:20,874 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:20,874 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:20,875 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:20,879 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java', wd=8, mask=IN_CREATE, cookie=0, name=StreamingJob.java>
2020-07-20 02:44:20,879 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java', wd=8, mask=IN_MODIFY, cookie=0, name=StreamingJob.java>
2020-07-20 02:44:20,883 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java', wd=8, mask=IN_ATTRIB, cookie=0, name=StreamingJob.java>
2020-07-20 02:44:20,883 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:20,883 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~', wd=8, mask=IN_DELETE, cookie=0, name=StreamingJob.java~>
2020-07-20 02:44:20,884 - DEBUG - TX: Sending notification: b'Content-Length: 188\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":1,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java"}]}}'
2020-07-20 02:44:20,884 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:20,884 - DEBUG - TX: Sending notification: b'Content-Length: 188\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java"}]}}'
2020-07-20 02:44:20,884 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:20,885 - DEBUG - TX: Sending notification: b'Content-Length: 191\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":3,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java%7E"}]}}'
2020-07-20 02:44:20,885 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:20,889 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:44:20,889 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:44:20,907 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:44:20,923 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:20,931 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:20,940 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:20,940 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:20,944 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:20,944 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913","diagnostics":[]}}'
2020-07-20 02:44:20,957 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:20,967 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:20,973 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:20,980 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:20,989 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:21,000 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:20 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:21,006 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:21 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:21,014 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:21 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:21,015 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java%7E","diagnostics":[]}}'
2020-07-20 02:44:21,023 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:21 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:21,043 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:21,043 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
FileNotFoundError: [Errno 2] No such file or directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913'
2020-07-20 02:44:21,043 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:21,043 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:21,043 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:21,043 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:21,043 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:21,043 - INFO - Server reported: Jul 20, 2020, 2:44:20 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:21,044 - INFO - Server reported: Jul 20, 2020, 2:44:21 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:21,044 - INFO - Server reported: Jul 20, 2020, 2:44:21 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:21,044 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
FileNotFoundError: [Errno 2] No such file or directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~'
2020-07-20 02:44:21,044 - INFO - Server reported: Jul 20, 2020, 2:44:21 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:22,121 - INFO - Received event notification
2020-07-20 02:44:22,121 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:44:22,122 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:44:22,123 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action None
2020-07-20 02:44:22,134 - INFO - Received event notification
2020-07-20 02:44:22,135 - DEBUG - Event name: InsertLeave
2020-07-20 02:44:22,254 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:22,255 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:22,256 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:22 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:22,256 - INFO - Server reported: Jul 20, 2020, 2:44:22 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:22,279 - INFO - Received event notification
2020-07-20 02:44:22,279 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:44:22,279 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:44:22,281 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action Change
2020-07-20 02:44:22,281 - DEBUG - TX: Sending notification: b'Content-Length: 9205\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n"}],"textDocument":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":3}}}'
2020-07-20 02:44:22,279 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:44:22,282 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:44:22,291 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:44:22,296 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:22 AM \\u003e\\u003e document/didChange"}}'
2020-07-20 02:44:22,354 - INFO - Server reported: Jul 20, 2020, 2:44:22 AM >> document/didChange
2020-07-20 02:44:24,438 - INFO - Received event notification
2020-07-20 02:44:24,438 - DEBUG - Event name: BufferUnload
2020-07-20 02:44:24,439 - DEBUG - TX: Sending notification: b'Content-Length: 184\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":3}}}'
2020-07-20 02:44:24,443 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:24 AM \\u003e\\u003e document/didClose"}}'
2020-07-20 02:44:24,444 - INFO - Server reported: Jul 20, 2020, 2:44:24 AM >> document/didClose
2020-07-20 02:44:24,446 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_DELETE, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:24,447 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":3,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:24,447 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:24,468 - INFO - Received event notification
2020-07-20 02:44:24,468 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:44:24,468 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1
2020-07-20 02:44:24,468 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:44:24,468 - INFO - Received event notification
2020-07-20 02:44:24,469 - DEBUG - Event name: BufferVisit
2020-07-20 02:44:24,469 - ERROR - Semantic completion not available for ['nerdtree']
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 106, in FiletypeCompletionAvailable
    self.GetFiletypeCompleter( filetypes )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/server_state.py", line 92, in GetFiletypeCompleter
    current_filetypes ) )
ValueError: No semantic completer exists for filetypes: ['nerdtree']
2020-07-20 02:44:24,474 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:24 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:24,474 - INFO - Server reported: Jul 20, 2020, 2:44:24 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:24,474 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp","diagnostics":[]}}'
2020-07-20 02:44:24,474 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
FileNotFoundError: [Errno 2] No such file or directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp'
2020-07-20 02:44:24,495 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:44:24,505 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:44:24,518 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:24 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,018 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_CREATE, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:26,018 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":1,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:26,020 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:26,021 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,027 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swx', wd=8, mask=IN_CREATE, cookie=0, name=.StreamingJob.java.swx>
2020-07-20 02:44:26,027 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swx', wd=8, mask=IN_DELETE, cookie=0, name=.StreamingJob.java.swx>
2020-07-20 02:44:26,027 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_DELETE, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:26,028 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_CREATE, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:26,028 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:26,028 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_ATTRIB, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:26,028 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":1,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swx"}]}}'
2020-07-20 02:44:26,028 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:26,031 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":3,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swx"}]}}'
2020-07-20 02:44:26,031 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:26,032 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":3,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:26,032 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:26,032 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":1,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:26,033 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:26,033 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:26,045 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:44:26,055 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:44:26,062 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:44:26,066 - INFO - Received event notification
2020-07-20 02:44:26,066 - DEBUG - Event name: BufferVisit
2020-07-20 02:44:26,071 - INFO - Received event notification
2020-07-20 02:44:26,072 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:44:26,072 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:44:26,074 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action Open
2020-07-20 02:44:26,075 - DEBUG - TX: Sending notification: b'Content-Length: 9218\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"languageId":"java","text":"package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Utils.\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n","uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":1}}}'
2020-07-20 02:44:26,100 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:44:26,100 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,115 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,129 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,143 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,144 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swx","diagnostics":[]}}'
2020-07-20 02:44:26,175 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,187 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,188 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp","diagnostics":[]}}'
2020-07-20 02:44:26,209 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,220 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:44:26,220 - INFO - Server reported: Jul 20, 2020, 2:44:24 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,220 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,221 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:44:26,221 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:44:26,221 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,221 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,221 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,221 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,221 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swx
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
FileNotFoundError: [Errno 2] No such file or directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swx'
2020-07-20 02:44:26,222 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,222 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,222 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 86, in ReadFile
    return f.read()
  File "/usr/lib/python3.6/codecs.py", line 321, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x96 in position 24: invalid start byte
2020-07-20 02:44:26,222 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,229 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,236 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,246 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:26,250 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:26 AM \\u003e\\u003e document/didOpen"}}'
2020-07-20 02:44:26,325 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,325 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,325 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:26,325 - INFO - Server reported: Jul 20, 2020, 2:44:26 AM >> document/didOpen
2020-07-20 02:44:30,089 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:30,090 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:30,092 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:30 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:30,094 - INFO - Server reported: Jul 20, 2020, 2:44:30 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:30,104 - INFO - Received event notification
2020-07-20 02:44:30,104 - DEBUG - Event name: FileReadyToParse
2020-07-20 02:44:30,104 - INFO - Adding buffer identifiers for file: /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java
2020-07-20 02:44:30,106 - DEBUG - Refreshing file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java: State is Open/action Change
2020-07-20 02:44:30,106 - DEBUG - TX: Sending notification: b'Content-Length: 9205\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n"}],"textDocument":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":2}}}'
2020-07-20 02:44:30,121 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:44:30,121 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:44:30,129 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:44:30,134 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:30 AM \\u003e\\u003e document/didChange"}}'
2020-07-20 02:44:30,177 - INFO - Server reported: Jul 20, 2020, 2:44:30 AM >> document/didChange
2020-07-20 02:44:30,918 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913', wd=8, mask=IN_CREATE, cookie=0, name=4913>
2020-07-20 02:44:30,918 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913', wd=8, mask=IN_ATTRIB, cookie=0, name=4913>
2020-07-20 02:44:30,918 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913', wd=8, mask=IN_DELETE, cookie=0, name=4913>
2020-07-20 02:44:30,918 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java', wd=8, mask=IN_MOVED_FROM, cookie=79884, name=StreamingJob.java>
2020-07-20 02:44:30,918 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~', wd=8, mask=IN_MOVED_TO, cookie=79884, name=StreamingJob.java~>
2020-07-20 02:44:30,918 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:30,919 - DEBUG - TX: Sending notification: b'Content-Length: 175\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":1,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913"}]}}'
2020-07-20 02:44:30,919 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:30,920 - DEBUG - TX: Sending notification: b'Content-Length: 175\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913"}]}}'
2020-07-20 02:44:30,920 - DEBUG - TX: Sending notification: b'Content-Length: 175\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":3,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913"}]}}'
2020-07-20 02:44:30,927 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:30 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:30,928 - INFO - Server reported: Jul 20, 2020, 2:44:30 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:30,928 - INFO - Received event notification
2020-07-20 02:44:30,928 - DEBUG - Event name: FileSave
2020-07-20 02:44:30,928 - DEBUG - TX: Sending notification: b'Content-Length: 9182\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"text":"package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n","textDocument":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java","version":2}}}'
2020-07-20 02:44:30,931 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java', wd=8, mask=IN_CREATE, cookie=0, name=StreamingJob.java>
2020-07-20 02:44:30,931 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java', wd=8, mask=IN_MODIFY, cookie=0, name=StreamingJob.java>
2020-07-20 02:44:30,932 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:30,932 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:30,932 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:30,932 - DEBUG - TX: Sending notification: b'Content-Length: 188\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":1,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java"}]}}'
2020-07-20 02:44:30,933 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:30,933 - DEBUG - TX: Sending notification: b'Content-Length: 188\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java"}]}}'
2020-07-20 02:44:30,933 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java', wd=8, mask=IN_ATTRIB, cookie=0, name=StreamingJob.java>
2020-07-20 02:44:30,933 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:30,933 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~', wd=8, mask=IN_DELETE, cookie=0, name=StreamingJob.java~>
2020-07-20 02:44:30,937 - DEBUG - TX: Sending notification: b'Content-Length: 188\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java"}]}}'
2020-07-20 02:44:30,937 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:30,937 - DEBUG - TX: Sending notification: b'Content-Length: 191\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":3,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java%7E"}]}}'
2020-07-20 02:44:30,937 - DEBUG - TX: Sending notification: b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink"}]}}'
2020-07-20 02:44:30,949 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:44:30,949 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:44:30,954 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:44:30,969 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:30 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:30,975 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:30 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:30,988 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:30 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:30,992 - INFO - Server reported: Jul 20, 2020, 2:44:30 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:30,992 - INFO - Server reported: Jul 20, 2020, 2:44:30 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:30,992 - INFO - Server reported: Jul 20, 2020, 2:44:30 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:30,992 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913","diagnostics":[]}}'
2020-07-20 02:44:31,002 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e document/didSave"}}'
2020-07-20 02:44:31,009 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":1,"message":"Jul 20, 2020, 2:44:31 AM file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java does not resolve to a ICompilationUnit"}}'
2020-07-20 02:44:31,010 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,019 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,023 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,029 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,035 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,048 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,049 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,052 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,060 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,061 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java%7E","diagnostics":[]}}'
2020-07-20 02:44:31,076 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:31 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:31,094 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
FileNotFoundError: [Errno 2] No such file or directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913'
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> document/didSave
2020-07-20 02:44:31,095 - ERROR - Server reported: Jul 20, 2020, 2:44:31 AM file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java does not resolve to a ICompilationUnit
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:31,095 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:31,095 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
FileNotFoundError: [Errno 2] No such file or directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~'
2020-07-20 02:44:31,096 - INFO - Server reported: Jul 20, 2020, 2:44:31 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:40,079 - DEBUG - in-event <InotifyEvent: src_path=b'/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp', wd=8, mask=IN_MODIFY, cookie=0, name=.StreamingJob.java.swp>
2020-07-20 02:44:40,079 - DEBUG - TX: Sending notification: b'Content-Length: 193\r\n\r\n{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"type":2,"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]}}'
2020-07-20 02:44:40,082 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Jul 20, 2020, 2:44:40 AM \\u003e\\u003e workspace/didChangeWatchedFiles "}}'
2020-07-20 02:44:40,083 - INFO - Server reported: Jul 20, 2020, 2:44:40 AM >> workspace/didChangeWatchedFiles 
2020-07-20 02:44:40,087 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP","diagnostics":[]}}'
2020-07-20 02:44:40,087 - ERROR - Error reading file /home/zyh/tmpWorkZone/RTSP/myflinkRTSP
Traceback (most recent call last):
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/completers/completer_utils.py", line 234, in GetFileContents
    return ToUnicode( ReadFile( filename ) )
  File "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/utils.py", line 85, in ReadFile
    with open( filepath, encoding = 'utf8' ) as f:
IsADirectoryError: [Errno 21] Is a directory: '/home/zyh/tmpWorkZone/RTSP/myflinkRTSP'
2020-07-20 02:44:40,094 - DEBUG - RX: Received message: b'{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml","diagnostics":[]}}'
2020-07-20 02:45:47,596 - INFO - Received debug info request
