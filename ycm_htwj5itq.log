2020-07-20 02:43:48,844 - DEBUG - GET b'http://127.0.0.1:55799/ready' (None)
{'content-type': 'application/json', 'x-ycm-hmac': b'cZo1WABkeqYxJ8OQVxpzIFQifSqcUyCMKtBJXIokTFM='}
2020-07-20 02:43:48,994 - ERROR - HTTPConnectionPool(host='127.0.0.1', port=55799): Max retries exceeded with url: /ready (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7ff522ffa6a0>: Failed to establish a new connection: [Errno 111] Connection refused',))
2020-07-20 02:43:49,095 - DEBUG - GET b'http://127.0.0.1:55799/ready' (None)
{'content-type': 'application/json', 'x-ycm-hmac': b'cZo1WABkeqYxJ8OQVxpzIFQifSqcUyCMKtBJXIokTFM='}
2020-07-20 02:43:49,099 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:43:49,099 - DEBUG - GET b'http://127.0.0.1:55799/signature_help_available' ({'subserver': 'nerdtree'})
{'content-type': 'application/json', 'x-ycm-hmac': b'8d/Rne6bexXZxp01BI32Mw2MWoFrC0sNTWnwVdWmPcQ='}
2020-07-20 02:43:49,102 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'Sl3flPsMmrIFGr/sJ/PA5UCKLgwf9AgR92qC5O8JqTs='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:43:49,107 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'JcCXF+E+QAnlwUdHXhU8lywuPQF4iN3VOXQTD1bVEr8='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:43:49,200 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'6LU2IEGEOSattiLs29YQpTZlQeM13hLLcHCQYU4kzIM='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}}'
2020-07-20 02:43:49,203 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'8LtH2aVH3OOHSVa7funcQP6cuNBbV6tNqFWHLeQNHQ0='}
b'{"filepath": "/home/zyh/.vim/banner.txt", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/.vim/banner.txt": {"contents": "----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n---------------------------------------------------------------------------------------------------WXNOmmdlksoffh-----------------\\n--------------------------------WMWoododdoWM---------------------------------------------------WXMNWOMWxkdlolokfdxk---------------\\n-----------------------------WWX0OxooddxxddkO0NW-----------------------------------------WWXK000OOkxoldlcoolldxkO0XNW-------------\\n--------------------------WNKkxo;clccllooll:;:odxOKNW--------------------------------NK00kdc::::coddoododxxdoolcllldk0N-----------\\n-----------------------WWXkdo:lo:ooloc:clllcllc::::cdxO0KXNNNWWW------------------WXOxlcooolccodlodoolcccloolloddooood0W----------\\n---------------------NKkddclc,oxxKKOdc:cclooll::c:;;::ccclodooddxxxxxxxddkkxkOOkkxdolcllodxolloooddol:,\'\',,;:lodxxxxxdON----------\\n------------------WKkxlcc;;xkkKWWXOdoc:ccllccc::ccc;;:c::clloc:llllclc:;,cccllcclcllllcccloollcclc::;,\'\'\'\'\'\';ododdxxxolkN---------\\n--------------WWX0x,,lc,ldkXW---NOooo;.\';c::c:;:::c:;:c:\';cll;clcolcollocllddooooccccc;;::llc::::;;;;;,,,,ldloxkkkOklcxKW---------\\n-WXOkkxOkkOOkxddl::\',lxOXW----WN0dllc;,,:cc:;;,;clccc::;\';c:,:l:co:,:cccc:ccc::cc:;;;;:;:ccc:;cc::,,::;;,;OWNXNNNWWNXKN-----------\\nXKd\'\'clddxdddoodocdxxO0XNKO0KOxocol::;\'\':::c;;;,::;;;;,..\';..::,:o:,cc:cc:lc:;:c::;:cclccllc:::clc:;:::;;,xW----------------------\\nX0o;coolodxxxxxxxxxxxxxxkl\':do::lxo;;c:;cc;:::c;;;,,\'\'\'\'....,l,.;l:\':olollooooooc::,:occlcc::lolooc:;;:c:,lK----------------------\\nWNOdl;;:cdkkkxxxdxxxxxxxoc::;:lcc::l;\'ccc:,,;:cccclodxkkdooodkocclc\',cccldllolcoocllcl:,::;,,:cclcc:;;::;;;xW---------------------\\n-W0l;;lxk0KKKKKXXNNNXXX0kxxo,;lc,,:,,coolcodkO0KXNWW---WWNXK0OOkkkxolc;;lo:clcccccc::ll::;;:llool:;:c:;;\',\';OW--------------------\\n--NkodO000KXNW-----------WNN0xdocc::llcoOKXW----------------WWNXK00Oxdc::lc,:c::;,:c;,:odolk0x:,,\'.;cclc;;;:lxOO0XW---------------\\n---WNNWWWW--------------------WNX0OKKXNW-------------------------WWNXX0Oxxxddooxdookkxk0KXNWWO:\',,;;\'.;llc:cc;,\',:okKW------------\\n-----------------------------------------------------------------------WNNNWWNNNWWWWWWWW-----WK000Okddxxkkdlc,\';,,;:cokXW---------\\n----------------------------------------------------------------------------------------------------------WNKxlc;,;ll::ckN--------\\n-------------------------------------------------------------------------------------------------------------WNKkd:,clccl0W-------\\n-----------------------------------------------------------------------------------------------------------------WXOkxoooxKNNWW---\\n---------------------------------------------------------------------------------------------------------------------WKkxdxkxxkkx-\\n----------------------------------------------------------------------------------------------------------------------WXKX0Okdolox\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------------------\\n", "filetypes": ["text"]}}}'
2020-07-20 02:43:49,210 - DEBUG - POST b'http://127.0.0.1:55799/semantic_completion_available'
{'content-type': 'application/json', 'x-ycm-hmac': b'gUIJt9Y1pwisCWBANJapuObmqVwlDNAnHQRi3xHjx1I='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25b8 \\u0007src/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "filetypes": "nerdtree"}'
2020-07-20 02:43:49,213 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:43:49,309 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:43:49,309 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:43:49,464 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'4CcCyKpwoN5vAAWrXhjThWTmaFQUNZqoCkuOfH70XXQ='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 5, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25b8 \\u0007java/\\n  \\u25b8 \\u0007resources/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:43:50,158 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'wyZ5qZADAye6cbnMGvxvipFH7RRkqiqC2qPiUo/M2nU='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 6, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25be \\u0007java/myflink/\\n      \\u0007ClientOfHTTP.java\\u0007*\\n      \\u0007Constants.java\\u0007*\\n      \\u0007PravegaWriter.java\\u0007*\\n      \\u0007StreamingJob.java\\u0007*\\n      \\u0007Utils.java\\u0007*\\n  \\u25b8 \\u0007resources/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:43:51,171 - DEBUG - GET b'http://127.0.0.1:55799/signature_help_available' ({'subserver': 'java'})
{'content-type': 'application/json', 'x-ycm-hmac': b'8d/Rne6bexXZxp01BI32Mw2MWoFrC0sNTWnwVdWmPcQ='}
2020-07-20 02:43:51,177 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'3ZVeZr1F4YgplKEAHvDfztmLXCx8ZDLhJH5qDD0JQFU='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:43:51,180 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'J2BWxZtLaaYBjcYjQphe/QKyVuYWCayUEdLhSarNh8A='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:43:51,372 - DEBUG - POST b'http://127.0.0.1:55799/semantic_completion_available'
{'content-type': 'application/json', 'x-ycm-hmac': b'23ohrn3HZPtZBLVbQbNoriC+yI6Cgp09eBozhfPy0Is='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "filetypes": "java"}'
2020-07-20 02:43:51,379 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:43:51,380 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:43:51,380 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:43:57,067 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:43:57,067 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:43:57,168 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: Init..."},{"message":"Initializing Java completer: 0% Starting Java Language Server"}]
2020-07-20 02:43:57,171 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:43:59,467 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 35% Starting Java Language Server - Refreshing '/jdt.ls-java-project'."}]
2020-07-20 02:43:59,468 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:02,362 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 79% Starting Java Language Server - project myflink"}]
2020-07-20 02:44:02,362 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:02,563 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 80% Starting Java Language Server - project myflink"}]
2020-07-20 02:44:02,564 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:02,864 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 88% Starting Java Language Server - Updating configuration for myflink"}]
2020-07-20 02:44:02,865 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:02,967 - DEBUG - RX: <Response [200]>
[{"message":"Initializing Java completer: 100% Starting Java Language Server - Updating configuration for myflink"},{"message":"Initializing Java completer: Ready"}]
2020-07-20 02:44:02,969 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:13,727 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'PEYPCpim/us/GAvdvy/bOZyv9qOGyPd+YYluPWa78gw='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 9, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        \\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "CurrentIdentifierFinished"}'
2020-07-20 02:44:13,751 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:44:13,752 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:13,853 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:44:13,854 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:14,393 - DEBUG - POST b'http://127.0.0.1:55799/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'Zz/ZmrOoc8YY8SZ/hxW3EZzDn/lk9/OwocKrq60dVq4='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 10, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        U\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:44:14,408 - DEBUG - RX: <Response [200]>
{"completions":[],"completion_start_column":9,"errors":[]}
2020-07-20 02:44:15,183 - DEBUG - POST b'http://127.0.0.1:55799/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'X9weBuR8Xvq9/qS0CMR7IVJ/6vL9+83ds3XV3ss4lxU='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 11, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Ut\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:44:15,187 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"Utils","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:44:15,383 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"Utils","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:44:15,395 - DEBUG - POST b'http://127.0.0.1:55799/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'Aj+U56P0drqE6yqbsEt7PgIU0LZjSj/Zl1DdveSjgvE='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 12, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Uti\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:44:15,399 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"Utils","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:44:15,401 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"Utils","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:44:16,311 - DEBUG - RX: <Response [200]>
{"completions":[{"insertion_text":"Utils","extra_menu_info":"[ID]"}],"completion_start_column":9,"errors":[]}
2020-07-20 02:44:16,325 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'PZtff12g6TkioNhiwQzyWSu0wh71IR9s7rQoe9AS0Jc='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 15, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Utils.\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "CurrentIdentifierFinished"}'
2020-07-20 02:44:16,330 - DEBUG - POST b'http://127.0.0.1:55799/completions'
{'content-type': 'application/json', 'x-ycm-hmac': b'PCRlPMgDiGsJLpRcyQrT9TPoOZ2sXd6lY/PdcPLWtCw='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 15, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Utils.\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "force_semantic": false}'
2020-07-20 02:44:16,373 - DEBUG - RX: <Response [200]>
{"completions":[],"completion_start_column":15,"errors":[]}
2020-07-20 02:44:20,937 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:44:20,937 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:21,040 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:44:21,040 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:21,141 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~"}]
2020-07-20 02:44:21,142 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:22,119 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'EybhQ029iT8rq6GxBJ1poXg2ZN/t3+/+7MGsinuS6r4='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 14, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Utils.\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:44:22,124 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'O9AvfbO0D/HbzA2g6FAgwARMPHhMdfZ6GBe5eQBmD5U='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 14, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Utils.\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "InsertLeave"}'
2020-07-20 02:44:22,224 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:44:22,260 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'2a8oKKRdQGHQQEotNsVF3Jy7a9dINeAjP2uWCBrh31U='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 94, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:44:22,352 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:44:22,352 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:22,361 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:44:22,455 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:44:22,456 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:24,436 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'Ez1Z6mY4vCFwvz71VuHRboMDDU/q5p77pWbbPQ8YbR0='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 94, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "BufferUnload"}'
2020-07-20 02:44:24,460 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'Drxg8Z8tNKAlqwpmLs01EQGmCUqJRbf3jjvZI0AXjCE='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 10, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25be \\u0007java/myflink/\\n      \\u0007ClientOfHTTP.java\\u0007*\\n      \\u0007Constants.java\\u0007*\\n      \\u0007PravegaWriter.java\\u0007*\\n      \\u0007StreamingJob.java\\u0007*\\n      \\u0007Utils.java\\u0007*\\n  \\u25b8 \\u0007resources/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:44:24,464 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'Dew1DUR40dALvPV8fzDmCYIQeUYTkhXNTVnzPvvDMBM='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1", "line_num": 10, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/NERD_tree_1": {"contents": "\\" Press ? for help\\n\\n.. (up a dir)\\n</RTSP/myflinkRTSP/\\n\\u25be \\u0007src/main/\\n  \\u25be \\u0007java/myflink/\\n      \\u0007ClientOfHTTP.java\\u0007*\\n      \\u0007Constants.java\\u0007*\\n      \\u0007PravegaWriter.java\\u0007*\\n      \\u0007StreamingJob.java\\u0007*\\n      \\u0007Utils.java\\u0007*\\n  \\u25b8 \\u0007resources/\\n\\u25b8 \\u0007target/\\n  \\u0007dependency-reduced-pom.xml\\n  \\u0007pom.xml\\u0007*\\n  \\u0007test.sh\\u0007*\\n", "filetypes": ["nerdtree"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:44:26,064 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'Iy6a0pSCdD/7onmM1l35xtcW8+plvEU+4J91Qal6mvI='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Utils.\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "BufferVisit"}'
2020-07-20 02:44:26,070 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'hk9s3fp3VY6xYye5kyXVq7LUwbMpW+7HpVmnyJK29b8='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n        Utils.\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:44:26,214 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:44:26,215 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]
2020-07-20 02:44:26,217 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:26,320 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swx"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/.StreamingJob.java.swp"}]
2020-07-20 02:44:26,322 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:30,093 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'Yw0526IJDNqMWb+pa5FwdmvJRLdtcx8K50Yiw/MTZ7w='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileReadyToParse"}'
2020-07-20 02:44:30,174 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:44:30,175 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:30,198 - DEBUG - RX: <Response [200]>
{}
2020-07-20 02:44:30,276 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:44:30,277 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:30,923 - DEBUG - POST b'http://127.0.0.1:55799/event_notification'
{'content-type': 'application/json', 'x-ycm-hmac': b'FYOrBTYVHz/eRXUzkOFzTDBng0xWhCIGIDo6U4yTozw='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 95, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}, "event_name": "FileSave"}'
2020-07-20 02:44:30,988 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:44:30,989 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:31,091 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:44:31,092 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:31,193 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/4913"},{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java~"}]
2020-07-20 02:44:31,194 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:40,170 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"}]
2020-07-20 02:44:40,171 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:40,273 - DEBUG - RX: <Response [200]>
[{"diagnostics":[],"filepath":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/pom.xml"}]
2020-07-20 02:44:40,273 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:44:50,344 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:44:50,345 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:45:00,420 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:45:00,421 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:45:10,498 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:45:10,498 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:45:20,570 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:45:20,570 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:45:30,644 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:45:30,644 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:45:40,722 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:45:40,723 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:45:47,594 - DEBUG - POST b'http://127.0.0.1:55799/debug_info'
{'content-type': 'application/json', 'x-ycm-hmac': b'Y4Sz0HmEltZcCR4lZGJLJwITwjObBbMSNcNubIXDNaI='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 81, "column_num": 39, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:45:47,598 - DEBUG - RX: <Response [200]>
{"python":{"executable":"/usr/bin/python3","version":"3.6.9"},"clang":{"has_support":false,"version":null},"extra_conf":{"path":null,"is_loaded":false},"completer":{"name":"Java","servers":[{"name":"jdt.ls","is_running":true,"executable":["/usr/bin/java","-Dfile.encoding=UTF-8","-Declipse.application=org.eclipse.jdt.ls.core.id1","-Dosgi.bundles.defaultStartLevel=4","-Declipse.product=org.eclipse.jdt.ls.core.product","-Dlog.level=ALL","-jar","/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar","-configuration","/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/config_linux","-data","/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmpkwwa37fn"],"address":null,"port":null,"pid":128969,"logfiles":["/tmp/jdt_ls_stderrz75zlcgp.log","/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmpkwwa37fn/.metadata/.log"],"extras":[{"key":"Server State","value":"Initialized"},{"key":"Project Directory","value":"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP"},{"key":"Settings","value":"{\n  \"bundles\": []\n}"},{"key":"Startup Status","value":"Ready"},{"key":"Java Path","value":"/usr/bin/java"},{"key":"Launcher Config.","value":"/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/config_linux"},{"key":"Workspace Path","value":"/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmpkwwa37fn"},{"key":"Extension Path","value":["/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/extensions"]}]}],"items":[]}}
2020-07-20 02:45:48,811 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'cmiB9xs32/5g8LyPS4DmkVfZyO6QBkd9Sp+tzbggLLw='}
b'{"filepath": "/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmpkwwa37fn/.metadata/.log", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmpkwwa37fn/.metadata/.log": {"contents": "!SESSION 2020-07-20 02:43:51.506 -----------------------------------------------\\neclipse.buildId=unknown\\njava.version=11.0.7\\njava.vendor=Ubuntu\\nBootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=en_US\\nCommand-line arguments:  -data /home/zyh/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/workspace/temp/tmpkwwa37fn\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:56.309\\n!MESSAGE class org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin is started\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:56.672\\n!MESSAGE Main thread is waiting\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:56.770\\n!MESSAGE >> initialize\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:56.888\\n!MESSAGE Initializing Java Language Server 0.57.0.202006172108\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:56.980\\n!MESSAGE Static Commands: []\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:56.984\\n!MESSAGE Non-Static Commands: [java.edit.organizeImports, java.project.refreshDiagnostics, java.project.import, java.project.removeFromSourcePath, java.project.listSourcePaths, java.project.provideSemanticTokens, java.project.getAll, java.project.isTestFile, java.project.getClasspaths, java.project.getSemanticTokensLegend, java.project.getSettings, java.project.updateSourceAttachment, java.project.resolveSourceAttachment, java.project.addToSourcePath]\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:57.006\\n!MESSAGE Creating the Java project jdt.ls-java-project\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:57.034\\n!MESSAGE >> initialized\\n\\n!ENTRY org.eclipse.buildship.core 2 0 2020-07-20 02:43:57.351\\n!MESSAGE Could not load Gradle version information\\n!STACK 0\\norg.gradle.api.UncheckedIOException: Cannot download published Gradle versions.\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:165)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.tryToDownloadAndCacheVersions(PublishedGradleVersions.java:149)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.create(PublishedGradleVersions.java:109)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersionsWrapper$LoadVersionsJob.run(PublishedGradleVersionsWrapper.java:60)\\n\\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\\nCaused by: java.io.IOException: Unable to tunnel through proxy. Proxy returns \\"HTTP/1.1 407 authenticationrequired\\"\\n\\tat java.base/sun.net.www.protocol.http.HttpURLConnection.doTunneling(HttpURLConnection.java:2172)\\n\\tat java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:183)\\n\\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1587)\\n\\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1515)\\n\\tat java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:250)\\n\\tat org.eclipse.buildship.core.internal.util.gradle.PublishedGradleVersions.downloadVersionInformation(PublishedGradleVersions.java:162)\\n\\t... 4 more\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:57.400\\n!MESSAGE Finished creating the Java project jdt.ls-java-project\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:43:59.446\\n!MESSAGE Importing Maven project(s)\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:02.779\\n!MESSAGE Workspace initialized in 5791ms\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:02.818\\n!MESSAGE >> initialization job finished\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:02.820\\n!MESSAGE >> workspace/didChangeConfiguration\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:02.888\\n!MESSAGE >> New configuration: {bundles=[]}\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:02.899\\n!MESSAGE >> document/didOpen\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:04.786\\n!MESSAGE >> build jobs finished\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:04.796\\n!MESSAGE >> registerFeature \'workspace/didChangeWatchedFiles\'\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:04.813\\n!MESSAGE >> registerFeature \'workspace/didChangeWatchedFiles\'\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:04.821\\n!MESSAGE >> watchers registered\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:13.662\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:16.343\\n!MESSAGE >> document/didChange\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:16.356\\n!MESSAGE >> document/completion\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:16.365\\n!MESSAGE Completion request completed\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.869\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.911\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.930\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.943\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.955\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.963\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.971\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.978\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.988\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:20.999\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:21.006\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:21.014\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:21.022\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:22.255\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:22.293\\n!MESSAGE >> document/didChange\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:24.440\\n!MESSAGE >> document/didClose\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:24.453\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:24.516\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.020\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.094\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.114\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.128\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.140\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.170\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.187\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.207\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.216\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.235\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.245\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:26.249\\n!MESSAGE >> document/didOpen\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:30.090\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:30.130\\n!MESSAGE >> document/didChange\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:30.921\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:30.964\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:30.974\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:30.988\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.001\\n!MESSAGE >> document/didSave\\n\\n!ENTRY org.eclipse.jdt.ls.core 4 0 2020-07-20 02:44:31.008\\n!MESSAGE file:///home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java does not resolve to a ICompilationUnit\\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.009\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.018\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.023\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.029\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.034\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.043\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.049\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.052\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.059\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:31.075\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n\\n!ENTRY org.eclipse.jdt.ls.core 1 0 2020-07-20 02:44:40.080\\n!MESSAGE >> workspace/didChangeWatchedFiles \\n", "filetypes": [""]}}}'
2020-07-20 02:45:48,915 - DEBUG - RX: <Response [200]>
false
2020-07-20 02:45:50,810 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:45:50,810 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:46:00,887 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:46:00,888 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:46:10,961 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:46:10,962 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:46:21,035 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:46:21,036 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:46:31,110 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:46:31,110 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:46:41,186 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:46:41,187 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
2020-07-20 02:46:51,260 - DEBUG - RX: <Response [200]>
true
2020-07-20 02:46:51,260 - DEBUG - POST b'http://127.0.0.1:55799/receive_messages'
{'content-type': 'application/json', 'x-ycm-hmac': b'hTYdmn9fSFHwO6glF+4y74xm97MO9McyUjcOxi/0L8s='}
b'{"filepath": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java", "line_num": 1, "column_num": 1, "working_dir": "/home/zyh/tmpWorkZone/RTSP/myflinkRTSP", "file_data": {"/home/zyh/tmpWorkZone/RTSP/myflinkRTSP/src/main/java/myflink/StreamingJob.java": {"contents": "package myflink;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.File;\\nimport java.util.*;\\nimport java.net.URI;\\nimport java.nio.ByteBuffer;\\nimport java.awt.image.BufferedImage;\\nimport javax.imageio.ImageIO;\\nimport org.apache.flink.api.java.utils.ParameterTool;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport io.pravega.connectors.flink.FlinkPravegaReader;\\nimport io.pravega.connectors.flink.PravegaConfig;\\nimport io.pravega.client.stream.Stream;\\nimport io.pravega.client.stream.ScalingPolicy;\\nimport io.pravega.client.stream.StreamConfiguration;\\nimport io.pravega.client.stream.impl.JavaSerializer;\\nimport io.pravega.connectors.flink.serialization.PravegaDeserializationSchema;\\nimport io.pravega.connectors.flink.serialization.PravegaSerialization;\\nimport io.pravega.connectors.flink.PravegaEventRouter;\\nimport io.pravega.connectors.flink.FlinkPravegaWriter;\\n\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n\\npublic class StreamingJob {\\n    private static int flag = 0;\\n    private static final int max_value = 9999999;\\n    private static final int lenTimeStamp = Long.BYTES;\\n    private static final int lenFrameID = Integer.BYTES;\\n\\n    // Logger initialization\\n    private static final Logger LOG = LoggerFactory.getLogger(StreamingJob.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        LOG.info(\\"Starting StreamingJob...\\");\\n        ParameterTool params = ParameterTool.fromArgs(args);\\n\\n        String scopeDataSource = params.get(\\"scopeDataSource\\", \\"examples\\");\\n        LOG.info(\\"-------- scopeDataSource ---------\\");\\n        LOG.info(scopeDataSource);\\n        String streamNameDataSource = params.get(\\"streamNameDataSource\\", \\"helloStream\\");\\n        LOG.info(\\"-------- streamNameDataSource ---------\\");\\n        LOG.info(streamNameDataSource);\\n        String ipDataSource = params.get(\\"ipDataSource\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipDataSource ---------\\");\\n        LOG.info(ipDataSource);\\n        String portDataSource = params.get(\\"portDataSource\\", \\"9090\\");\\n        LOG.info(\\"-------- portDataSource ---------\\");\\n        LOG.info(portDataSource);\\n\\n        String scopeOutput = params.get(\\"scopeOutput\\", \\"examples\\");\\n        LOG.info(\\"-------- sco#peOutput ---------\\");\\n        LOG.info(scopeOutput);\\n        String streamNameOutput = params.get(\\"streamNameOutput\\", \\"ResultOfAI\\");\\n        LOG.info(\\"-------- streamNameOutput ---------\\");\\n        LOG.info(streamNameOutput);\\n        String ipOutput = params.get(\\"ipOutput\\", \\"51.4.77.100\\");\\n        LOG.info(\\"-------- ipOutput ---------\\");\\n        LOG.info(ipOutput);\\n        String portOutput = params.get(\\"portOutput\\", \\"9090\\");\\n        LOG.info(\\"-------- portOutput ---------\\");\\n        LOG.info(portOutput);\\n        String imgPath = params.get(\\"imgPath\\", \\"/home/edge/imgs\\");\\n        LOG.info(\\"-------- imgPath ---------\\");\\n        LOG.info(imgPath);\\n        String uriAI = params.get(\\"uriAI\\", \\"http://51.4.77.84:8864/api/v1/obj_detection/image\\");\\n        LOG.info(\\"-------- uriAI ---------\\");\\n        LOG.info(uriAI);\\n        boolean needBackup = Boolean.parseBoolean(params.get(\\"backup\\", \\"false\\"));\\n        LOG.info(\\"-------- backup ---------\\");\\n        LOG.info(String.valueOf(needBackup));\\n        // initialize the parameter utility tool in order to retrieve input parameters\\n        LOG.info(\\"Init Pravega connector: Data Source...\\");\\n        PravegaConfig pravegaConfigDataSource = PravegaConfig\\n                .fromParams(params)\\n                .withControllerURI(URI.create(\\"tcp://\\" + ipDataSource + \\":\\" + portDataSource))\\n                .withDefaultScope(scopeDataSource)\\n                //.withCredentials(credentials)\\n                .withHostnameValidation(false);\\n\\n        StreamConfiguration streamConfiguration = StreamConfiguration.builder()\\n            .scalingPolicy(ScalingPolicy.fixed(1))\\n            .build();\\n\\n        // create the Pravega input stream (if necessary)\\n        Stream streamDataSource = Utils.createStream(\\n                pravegaConfigDataSource,\\n                streamNameDataSource,\\n                //params.get(Constants.STREAM_PARAM, Constants.DEFAULT_STREAM),\\n                streamConfiguration); // \\"stream\\" \\"helloStream\\"\\n\\n        // create the Pravega source to read a stream of text\\n        PravegaDeserializationSchema<byte[]> adapter = new PravegaDeserializationSchema<>(byte[].class, new JavaSerializer());\\n        FlinkPravegaReader<byte[]> source = FlinkPravegaReader.<byte[]>builder()\\n                .withPravegaConfig(pravegaConfigDataSource)\\n                .forStream(streamDataSource)\\n                //.withDeserializationSchema(PravegaSerialization.deserializationFor(ByteBuffer.class))\\n                //.withDeserializationSchema(new ByteBufferSerializer())\\n                .withDeserializationSchema(adapter)\\n                .build();\\n        LOG.info(\\"Done\\");\\n\\n        // initialize the Flink execution environment\\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        LOG.info(\\"Getting bytes from Pravega...\\");\\n        DataStream<String> resAIStream = env.addSource(source).name(\\"Pravega Stream\\")\\n            .map(new MapFunction<byte[], String>() {\\n                @Override\\n                public String map(byte[] bytes) throws Exception {\\n                    int lenImage = bytes.length - lenTimeStamp - lenFrameID;\\n                    ByteArrayInputStream bis = new ByteArrayInputStream(Arrays.copyOfRange(bytes, 0, lenImage));\\n                    BufferedImage bImage = ImageIO.read(bis);\\n                    byte[] timeStampByte = Arrays.copyOfRange(bytes, lenImage, lenImage + lenTimeStamp);\\n                    ByteBuffer bufferTimeStamp = ByteBuffer.allocate(lenTimeStamp);\\n                    bufferTimeStamp.put(timeStampByte);\\n                    bufferTimeStamp.flip();\\n                    String timeStamp = String.valueOf(bufferTimeStamp.getLong());\\n                    byte[] frameIDByte = Arrays.copyOfRange(bytes, lenImage + lenTimeStamp, lenImage + lenTimeStamp + lenFrameID);\\n                    ByteBuffer bufferFrameID = ByteBuffer.allocate(lenFrameID);\\n                    bufferFrameID.put(frameIDByte);\\n                    bufferFrameID.flip();\\n                    String frameID = String.valueOf(bufferFrameID.getInt());\\n                    String fileName = imgPath + \\"/output_\\" + String.valueOf(flag) + \\".jpg\\";\\n                    flag++;\\n                    if (flag == max_value) {\\n                        flag = 0;\\n                    }\\n                    File imgFile = new File(fileName);\\n                    ImageIO.write(bImage, \\"jpg\\", imgFile);\\n                    Map<String, String> metadata = new HashMap<>(2);\\n                    metadata.put(\\"frame_id\\", frameID);\\n                    metadata.put(\\"frame_timestamp\\", timeStamp);\\n                    String resOfAI = ClientOfHTTP.multipartRequest(uriAI, metadata, fileName, \\"image\\", \\"image/jpeg\\");\\n                    if (!needBackup) {\\n                        imgFile.delete();\\n                    }\\n                    return resOfAI;\\n                }\\n            });\\n\\n        // create the Pravega sink to write a stream of resOfAI\\n        PravegaConfig pravegaConfigWriter = PravegaConfig.fromDefaults()\\n            .withControllerURI(URI.create(\\"tcp://\\" + ipOutput + \\":\\" + portOutput))\\n            .withDefaultScope(scopeOutput)\\n            //.withCredentials(credentials)\\n            .withHostnameValidation(false);\\n\\n        Stream streamWriter = Utils.createStream(\\n                pravegaConfigWriter,\\n                streamNameOutput,\\n                streamConfiguration);\\n\\n        FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\\n                .withPravegaConfig(pravegaConfigWriter)\\n                .forStream(streamWriter)\\n                .withEventRouter(new EventRouter())\\n                .withSerializationSchema(PravegaSerialization.serializationFor(String.class))\\n                .build();\\n        resAIStream.addSink(writer).name(\\"Pravega Stream\\");\\n\\n        if (needBackup) {\\n            resAIStream.print();\\n        }\\n\\n        // execute within the Flink environment\\n        env.execute(\\"StreamingJob\\");\\n        LOG.info(\\"Ending StreamingJob...\\");\\n    }\\n\\n    public static class EventRouter implements PravegaEventRouter<String> {\\n        // Ordering - events with the same routing key will always be\\n        // read in the order they were written\\n        @Override\\n        public String getRoutingKey(String event) {\\n            return \\"resultOfAI\\";\\n        }\\n    }\\n}\\n\\n", "filetypes": ["java"]}}}'
